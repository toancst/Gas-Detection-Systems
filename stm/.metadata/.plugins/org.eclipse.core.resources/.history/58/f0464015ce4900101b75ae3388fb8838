#include "stm32f4xx.h"

// Biến toàn cục
volatile uint32_t timer_counter = 0;
volatile uint8_t led_a5_frequency = 2; // Tần số hiện tại của LED A5 (2-10Hz)
volatile uint32_t led_a4_counter = 0;  // Counter cho LED A4 (1Hz)
volatile uint32_t led_a5_counter = 0;  // Counter cho LED A5
volatile uint8_t led_a4_state = 0;     // Trạng thái LED A4
volatile uint8_t led_a5_state = 0;     // Trạng thái LED A5

// Hàm khởi tạo GPIO
void GPIO_Init_Custom(void) {
    // Bật clock cho GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // Cấu hình PA4 và PA5 là output
    GPIOA->MODER &= ~(GPIO_MODER_MODER4 | GPIO_MODER_MODER5);
    GPIOA->MODER |= (GPIO_MODER_MODER4_0 | GPIO_MODER_MODER5_0); // Output mode

    // Cấu hình output type là push-pull
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_4 | GPIO_OTYPER_OT_5);

    // Cấu hình tốc độ cao
    GPIOA->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR4 | GPIO_OSPEEDER_OSPEEDR5);

    // Không pull-up, pull-down
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR4 | GPIO_PUPDR_PUPDR5);

    // Tắt LED ban đầu
    GPIOA->BSRR = (GPIO_BSRR_BR_4 | GPIO_BSRR_BR_5);
}

// Hàm khởi tạo Timer 2
void TIM2_Init(void) {
    // Bật clock cho Timer 2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;

    // Cấu hình Timer 2
    // Giả sử system clock = 84MHz, prescaler = 8400-1 -> timer clock = 10kHz
    TIM2->PSC = 8400 - 1;  // Prescaler
    TIM2->ARR = 10 - 1;    // Auto-reload (10ms period = 100Hz interrupt)

    // Bật interrupt update
    TIM2->DIER |= TIM_DIER_UIE;

    // Bật Timer 2
    TIM2->CR1 |= TIM_CR1_CEN;

    // Cấu hình NVIC cho Timer 2
    NVIC_EnableIRQ(TIM2_IRQn);
    NVIC_SetPriority(TIM2_IRQn, 0);
}

// Hàm bật/tắt LED
void LED_Toggle(uint8_t led_pin) {
    if (led_pin == 4) {
        GPIOA->ODR ^= GPIO_ODR_ODR_4;
    } else if (led_pin == 5) {
        GPIOA->ODR ^= GPIO_ODR_ODR_5;
    }
}

// Handler cho Timer 2 interrupt (được gọi mỗi 10ms)
void TIM2_IRQHandler(void) {
    if (TIM2->SR & TIM_SR_UIF) {
        // Xóa interrupt flag
        TIM2->SR &= ~TIM_SR_UIF;

        timer_counter++;

        // Xử lý LED A4 (1Hz = nháy mỗi 0.5s = 50 lần 10ms)
        led_a4_counter++;
        if (led_a4_counter >= 50) { // 500ms
            LED_Toggle(4);
            led_a4_counter = 0;
        }

        // Xử lý LED A5 (tần số thay đổi từ 2Hz đến 10Hz)
        led_a5_counter++;
        uint32_t led_a5_period = 50 / led_a5_frequency; // Tính period theo tần số

        if (led_a5_counter >= led_a5_period) {
            LED_Toggle(5);
            led_a5_counter = 0;
        }

        // Thay đổi tần số LED A5 mỗi 2 giây (200 lần 10ms)
        if (timer_counter >= 200) {
            led_a5_frequency++;
            if (led_a5_frequency > 10) {
                led_a5_frequency = 2; // Reset về 2Hz
            }
            timer_counter = 0;
        }
    }
}

// Hàm delay đơn giản
void delay_ms(uint32_t ms) {
    volatile uint32_t count = ms * 21000; // Ước tính cho 84MHz
    while (count--);
}

int main(void) {
    // Khởi tạo system clock (có thể cần cấu hình chi tiết hơn)
    SystemCoreClockUpdate();

    // Khởi tạo GPIO
    GPIO_Init_Custom();

    // Khởi tạo Timer
    TIM2_Init();

    while (1) {
        // Main loop - có thể thêm các tác vụ khác ở đây
        delay_ms(100);
    }

    return 0;
}

// SystemInit đã được định nghĩa trong system_stm32f4xx.c, không cần định nghĩa lại

/*
Giải thích hoạt động:
1. LED A4 (PA4): Nháy với tần số 1Hz (0.5s ON, 0.5s OFF)
2. LED A5 (PA5): Nháy với tần số thay đổi từ 2Hz đến 10Hz, thay đổi mỗi 2 giây
3. Timer 2 tạo interrupt mỗi 10ms (100Hz)
4. Trong interrupt handler:
   - Đếm để tạo timing cho LED A4 (50 x 10ms = 500ms)
   - Đếm để tạo timing cho LED A5 (tùy theo tần số hiện tại)
   - Đếm để thay đổi tần số LED A5 mỗi 2 giây

Cấu hình Timer:
- Prescaler: 8400-1 (giảm 84MHz xuống 10kHz)
- Auto-reload: 10-1 (tạo period 1ms cho mỗi 10 chu kỳ = 10ms)
- Interrupt frequency: 100Hz (mỗi 10ms)
*/
