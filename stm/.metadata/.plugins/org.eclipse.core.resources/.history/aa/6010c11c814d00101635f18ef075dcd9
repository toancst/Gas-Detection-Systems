#include "stm32f4xx.h"
#include <stdio.h>
#include <math.h>

// ... (Tất cả các định nghĩa #define vẫn giữ nguyên) ...
#define MQ2_PIN_PORT    GPIOA
#define MQ2_PIN         0

#define LED_GREEN_PORT  GPIOA
#define LED_GREEN_PIN   4
#define LED_YELLOW_PORT GPIOA
#define LED_YELLOW_PIN  5
#define LED_RED_PORT    GPIOA
#define LED_RED_PIN     6
#define LED_STOP_PORT   GPIOA
#define LED_STOP_PIN    7

#define GAS_VALVE_PORT  GPIOA
#define GAS_VALVE_PIN   1

#define PB0_PORT        GPIOB
#define PB0_PIN         0
#define PB1_PORT        GPIOB
#define PB1_PIN         1

#define GAS_THRESHOLD_LOW   300
#define GAS_THRESHOLD_MID   900
#define GAS_THRESHOLD_HIGH  1600
#define GAS_THRESHOLD_BUZZER 1200
#define GAS_THRESHOLD_VALVE  1000

#define PI 3.14159265
#define SAMPLES 100
#define VREF 3.3f
#define ADC_MAX 4095.0f

#define CALIBRATION_SAMPLE_TIMES     50
#define CALIBRATION_SAMPLE_INTERVAL  500
#define CLEAN_AIR_FACTOR             9.83f
#define LPG_SLOPE                   -0.47f
#define LPG_Y_INTERCEPT              1.38f

#define BUTTON_DEBOUNCE_TIME 20 // 20 * 10ms = 200ms

// ... (Tất cả các biến toàn cục volatile vẫn giữ nguyên) ...
volatile uint16_t pwm_table[SAMPLES];
volatile uint32_t current_index = 0;
volatile uint8_t buzzer_active = 0;

volatile uint32_t timer_counter = 0;
volatile uint32_t led_red_counter = 0;
volatile uint8_t led_red_state = 0;
volatile uint8_t led_red_frequency = 1;
volatile uint16_t current_gas_value = 0;

volatile uint8_t stop_mode_enabled = 0;
volatile uint32_t stop_mode_timer = 0;
volatile uint8_t stop_mode_protection = 0;

volatile uint32_t reset_protection_timer = 0;
volatile uint8_t reset_protection_active = 0;

volatile uint8_t gas_valve_state = 0;

volatile uint32_t oled_update_counter = 0;
volatile uint8_t oled_need_update = 0;

// Các biến mới cho việc chống dội phím trong ngắt
volatile uint32_t last_pb0_press_time = 0;
volatile uint32_t last_pb1_press_time = 0;

const uint8_t font5x7[][5] = { /* ... (Dữ liệu font không đổi) ... */ };

// ... (Khai báo hàm không thay đổi, ngoại trừ các hàm về nút bấm) ...
void UART2_Init(void);
void UART2_SendChar(uint8_t c);
void UART2_SendString(char *str);
void ADC1_Init(void);
uint16_t ADC1_Read(void);
void LED_Init(void);
void Gas_Valve_Init(void);
void TIM2_Init(void);
void LED_Control(uint16_t gasValue);
void Gas_Valve_Control(uint16_t gasValue);
void Send_Gas_Value(uint16_t gasValue);
uint8_t Calculate_Red_LED_Frequency(uint16_t gasValue);
void Enter_Stop_Mode(void);
void Exit_Stop_Mode(void);
void System_Reset(void);

void delay_ms(uint32_t ms);
void make_triangle_sin_table();
void init_pwm();
void update_pwm();

void I2C1_Init(void);
void SSD1306_Init(void);
void SSD1306_UpdateDisplay(void);
// ...

// *** HÀM MỚI VÀ HÀM ĐÃ THAY ĐỔI ***
void Button_Interrupt_Init(void);


int main(void) {
    SystemCoreClockUpdate();
    UART2_Init();
    ADC1_Init();
    LED_Init();
    Gas_Valve_Init();
    TIM2_Init();
    init_pwm();
    make_triangle_sin_table();

    // Sử dụng hàm khởi tạo ngắt mới
    Button_Interrupt_Init();

    I2C1_Init();
    SSD1306_Init();
    SSD1306_Clear();

    reset_protection_active = 1;
    reset_protection_timer = 0;

    uint16_t gasValue;

    while (1) {
        if (!stop_mode_enabled) {
            gasValue = ADC1_Read();
            current_gas_value = gasValue;
            LED_Control(gasValue);
            Gas_Valve_Control(gasValue);
            Send_Gas_Value(gasValue);

            if (gasValue >= GAS_THRESHOLD_BUZZER) {
                buzzer_active = 1;
                update_pwm();
            } else {
                buzzer_active = 0;
                update_pwm();
            }
        }

        if (oled_need_update) {
            SSD1306_UpdateDisplay();
            oled_need_update = 0;
        }

        // Không cần gọi hàm xử lý nút bấm ở đây nữa
        // Handle_PB0_Press();
        // Handle_PB1_Press();

        delay_ms(10);
    }
}

// ... (Các hàm UART, ADC, LED, v.v... không đổi) ...

// *** HÀM MỚI: Khởi tạo nút bấm với ngắt ***
void Button_Interrupt_Init(void) {
    // 1. Cấp clock cho GPIOB và SYSCFG
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;

    // 2. Cấu hình PB0 và PB1 là chân vào, kéo xuống
    PB0_PORT->MODER &= ~((3 << (PB0_PIN * 2)) | (3 << (PB1_PIN * 2)));
    PB0_PORT->PUPDR |= (2 << (PB0_PIN * 2)) | (2 << (PB1_PIN * 2));

    // 3. Kết nối EXTI Line với chân GPIO
    // PB0 -> EXTI0
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0; // Xóa cấu hình cũ
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PB; // Đặt là Port B
    // PB1 -> EXTI1
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI1; // Xóa cấu hình cũ
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI1_PB; // Đặt là Port B

    // 4. Cấu hình EXTI line
    // Bỏ mặt nạ (unmask) cho line 0 và 1
    EXTI->IMR |= (1 << PB0_PIN) | (1 << PB1_PIN);
    // Cấu hình ngắt sườn lên (Rising edge trigger)
    EXTI->RTSR |= (1 << PB0_PIN) | (1 << PB1_PIN);
    // Tắt ngắt sườn xuống (Falling edge trigger)
    EXTI->FTSR &= ~((1 << PB0_PIN) | (1 << PB1_PIN));

    // 5. Kích hoạt và đặt độ ưu tiên cho ngắt trong NVIC
    NVIC_SetPriority(EXTI0_IRQn, 1);
    NVIC_EnableIRQ(EXTI0_IRQn);

    NVIC_SetPriority(EXTI1_IRQn, 1);
    NVIC_EnableIRQ(EXTI1_IRQn);
}

// Hàm này không còn cần thiết
// uint8_t Read_Button(GPIO_TypeDef* port, uint16_t pin) { ... }


// Các hàm này không còn cần thiết, logic đã được chuyển vào ISR
// void Handle_PB0_Press(void) { ... }
// void Handle_PB1_Press(void) { ... }

void System_Reset(void) {
    UART2_SendString("222222\r\n111111\r\n");
    delay_ms(100);
    NVIC_SystemReset();
}

void Enter_Stop_Mode(void) {
    stop_mode_enabled = 1;
    stop_mode_protection = 1;
    stop_mode_timer = 0;

    UART2_SendString("000000\r\n");

    GPIOA->BSRR = (1 << (LED_GREEN_PIN + 16)) | (1 << (LED_YELLOW_PIN + 16)) | (1 << (LED_RED_PIN + 16));
    GPIOA->BSRR = (1 << LED_STOP_PIN);
    GPIOA->BSRR = (1 << (GAS_VALVE_PIN + 16));
    gas_valve_state = 0;
    buzzer_active = 0;
    update_pwm();
}

void Exit_Stop_Mode(void) {
    stop_mode_enabled = 0;
    stop_mode_protection = 0;
    stop_mode_timer = 0;
    UART2_SendString("111111\r\n");
    GPIOA->BSRR = (1 << (LED_STOP_PIN + 16));
}

// ... (Các hàm PWM, delay, I2C, SSD1306 không thay đổi) ...

// *** TRÌNH PHỤC VỤ NGẮT (ISR) ***

// ISR cho TIM2 - Dùng cho các tác vụ định kỳ và bộ đếm chống dội phím
void TIM2_IRQHandler(void) {
    if (TIM2->SR & TIM_SR_UIF) {
        TIM2->SR &= ~TIM_SR_UIF;

        timer_counter++;
        oled_update_counter++;

        if (oled_update_counter >= 50) { // Cập nhật OLED mỗi 500ms
            oled_need_update = 1;
            oled_update_counter = 0;
        }

        if (stop_mode_protection) {
            stop_mode_timer++;
            if (stop_mode_timer >= 100) { // Bảo vệ 1s
                stop_mode_protection = 0;
            }
        }

        if (reset_protection_active) {
            reset_protection_timer++;
            if (reset_protection_timer >= 100) { // Bảo vệ 1s
                reset_protection_active = 0;
            }
        }

        // ... (Logic nháy LED đỏ không đổi) ...
        if (!stop_mode_enabled && led_red_frequency > 0) {
            led_red_counter++;
            uint32_t led_red_period = 50 / led_red_frequency;

            if (led_red_counter >= led_red_period) {
                GPIOA->ODR ^= (1 << LED_RED_PIN);
                led_red_counter = 0;
            }
        } else if (stop_mode_enabled) {
            GPIOA->BSRR = (1 << (LED_RED_PIN + 16));
            led_red_counter = 0;
        }
    }
}

// ISR cho PB0 (Nút Reset) trên EXTI Line 0
void EXTI0_IRQHandler(void) {
    // Kiểm tra xem ngắt có phải từ line 0 không
    if (EXTI->PR & (1 << PB0_PIN)) {
        // Xóa cờ ngắt bằng cách ghi 1 vào nó
        EXTI->PR = (1 << PB0_PIN);

        // Chống dội phím
        if ((timer_counter - last_pb0_press_time) > BUTTON_DEBOUNCE_TIME) {
            if (!reset_protection_active) {
                System_Reset();
            }
            last_pb0_press_time = timer_counter; // Cập nhật thời điểm nhấn cuối cùng
        }
    }
}

// ISR cho PB1 (Nút Stop/Start) trên EXTI Line 1
void EXTI1_IRQHandler(void) {
    // Kiểm tra xem ngắt có phải từ line 1 không
    if (EXTI->PR & (1 << PB1_PIN)) {
        // Xóa cờ ngắt
        EXTI->PR = (1 << PB1_PIN);

        // Chống dội phím
        if ((timer_counter - last_pb1_press_time) > BUTTON_DEBOUNCE_TIME) {
            if (!stop_mode_enabled) {
                Enter_Stop_Mode();
            } else if (!stop_mode_protection) {
                Exit_Stop_Mode();
            }
            last_pb1_press_time = timer_counter; // Cập nhật thời điểm nhấn cuối cùng
        }
    }
}


// ... (Tất cả các hàm còn lại giữ nguyên: I2C1_Init, I2C_WriteByte, SSD1306_..., v.v...)
// ...
void I2C1_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;

    // Cấu hình PB8 (SCL) và PB9 (SDA)
    GPIOB->MODER &= ~((3U << (8 * 2)) | (3U << (9 * 2))); // Xóa bit
    GPIOB->MODER |= (2U << (8 * 2)) | (2U << (9 * 2));    // Chế độ Alternate Function
    GPIOB->OTYPER |= (1U << 8) | (1U << 9);              // Open-drain
    GPIOB->OSPEEDR |= (3U << (8 * 2)) | (3U << (9 * 2));  // Tốc độ cao
    GPIOB->PUPDR &= ~((3U << (8 * 2)) | (3U << (9 * 2))); // Không kéo lên/xuống (dùng trở kéo ngoài)

    // Cấu hình Alternate Function cho I2C1
    GPIOB->AFR[1] &= ~((0xF << ((8 - 8) * 4)) | (0xF << ((9 - 8) * 4)));
    GPIOB->AFR[1] |= (4 << ((8 - 8) * 4)) | (4 << ((9 - 8) * 4)); // AF4 cho I2C1

    // Cấu hình I2C1
    I2C1->CR1 |= I2C_CR1_SWRST; // Reset I2C
    I2C1->CR1 &= ~I2C_CR1_SWRST;

    I2C1->CR2 = 16; // Tần số APB1 (16MHz)
    I2C1->CCR = 80; // Standard mode 100kHz: 16MHz / (2 * 100kHz) = 80
    I2C1->TRISE = 17; // 1000ns / (1/16MHz) + 1 = 17
    I2C1->CR1 |= I2C_CR1_PE; // Bật I2C peripheral
}

void I2C_WriteByte(uint8_t address, uint8_t reg, uint8_t data) {
    while(I2C1->SR2 & I2C_SR2_BUSY);
    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB));
    I2C1->DR = address << 1;
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
    (void)I2C1->SR2;
    while (!(I2C1->SR1 & I2C_SR1_TXE));
    I2C1->DR = reg;
    while (!(I2C1->SR1 & I2C_SR1_TXE));
    I2C1->DR = data;
    while (!(I2C1->SR1 & I2C_SR1_BTF));
    I2C1->CR1 |= I2C_CR1_STOP;
}
//...
// Các hàm SSD1306 giữ nguyên như trong code gốc của bạn.
