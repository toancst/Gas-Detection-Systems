#include "stm32f4xx.h"
#include <stdio.h>

#define VREF 3.3f
#define ADC_MAX 4095.0f

void UART2_Init(void);
void UART2_SendString(char *str);
void ADC1_Init(void);
uint16_t ADC1_Read_Channel(uint8_t channel);
float ADC_to_Voltage(uint16_t adc_val);
void delay_ms(uint32_t ms);

int main(void) {
    uint16_t adc_val;
    float voltage, max_voltage, min_voltage;
    uint32_t time_counter = 0;

    SystemCoreClockUpdate();
    UART2_Init();
    ADC1_Init();

    max_voltage = 0.0f;
    min_voltage = VREF;

    while (1) {
        adc_val = ADC1_Read_Channel(8); // PB0 là ADC_IN8
        voltage = ADC_to_Voltage(adc_val);

        if (voltage > max_voltage)
            max_voltage = voltage;

        if (voltage < min_voltage)
            min_voltage = voltage;

        delay_ms(100);
        time_counter += 100;

        if (time_counter >= 2000) { // Mỗi 2 giây
            char buffer[100];
            sprintf(buffer, "Max Voltage: %.2f V | Min Voltage: %.2f V\r\n", max_voltage, min_voltage);
            UART2_SendString(buffer);

            // Reset lại giá trị đo cho chu kỳ mới
            max_voltage = 0.0f;
            min_voltage = VREF;
            time_counter = 0;
        }
    }
}

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    GPIOA->MODER |= (2 << 4) | (2 << 6);
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12);

    USART2->BRR = 0x8B;
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}

void UART2_SendString(char *str) {
    while (*str) UART2_SendChar(*str++);
}

void ADC1_Init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;

    GPIOB->MODER |= (3 << (0 * 2)); // PB0 là analog mode

    ADC1->SMPR2 |= (7 << (3 * 8)); // Sample time dài cho ADC_IN8
    ADC1->CR2 |= ADC_CR2_ADON;
}

uint16_t ADC1_Read_Channel(uint8_t channel) {
    ADC1->SQR3 = channel;
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return ADC1->DR;
}

float ADC_to_Voltage(uint16_t adc_val) {
    return (adc_val * VREF) / ADC_MAX;
}

void delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    for(uint32_t i = 0; i < ms; i++) {
        while(!(SysTick->CTRL & (1 << 16)));
    }
    SysTick->CTRL = 0;
}
