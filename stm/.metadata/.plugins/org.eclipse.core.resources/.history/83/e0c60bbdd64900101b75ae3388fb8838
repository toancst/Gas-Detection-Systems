#include <stdint.h>
#include <math.h>

#define PI 3.14159265
#define SINE_SAMPLES 100
#define PWM_PERIOD 1000

volatile uint16_t sine_table[SINE_SAMPLES];
volatile uint8_t sine_index = 0;

void delay_us(uint32_t us)
{
    for (uint32_t i = 0; i < us * 8; i++) {
        __asm__("nop");
    }
}

void generate_sine_table()
{
    for (int i = 0; i < SINE_SAMPLES; i++) {
        float angle = 2 * PI * i / SINE_SAMPLES;
        float val = (sinf(angle) + 1) / 2;
        sine_table[i] = (uint16_t)(val * PWM_PERIOD);
    }
}

void TIM1_UP_IRQHandler(void)
{
    // Clear update interrupt flag
    *(volatile uint32_t *)(0x40012C00 + 0x10) &= ~(1 << 0); // TIM1_SR

    // Update PWM duty cycle
    *(volatile uint32_t *)(0x40012C00 + 0x34) = sine_table[sine_index]; // TIM1_CCR1
    sine_index = (sine_index + 1) % SINE_SAMPLES;
}

int main(void)
{
    // 1. Enable clocks
    *(volatile uint32_t *)(0x40021018) |= (1 << 2);  // Enable GPIOA
    *(volatile uint32_t *)(0x4002101C) |= (1 << 11); // Enable TIM1
    *(volatile uint32_t *)(0x4002101C) |= (1 << 0);  // AFIO

    // 2. Configure PA8 as alternate function push-pull
    *(volatile uint32_t *)(0x40010804) &= ~(0xF << 0);  // Clear bits for PA8
    *(volatile uint32_t *)(0x40010804) |= (0xB << 0);   // CNF=10 (AF PP), MODE=11 (50MHz)

    // 3. Generate sine table
    generate_sine_table();

    // 4. Configure TIM1 for PWM
    *(volatile uint32_t *)(0x40012C00 + 0x2C) = PWM_PERIOD - 1;      // TIM1_ARR
    *(volatile uint32_t *)(0x40012C00 + 0x28) = 72 - 1;              // TIM1_PSC: 72MHz / 72 = 1MHz
    *(volatile uint32_t *)(0x40012C00 + 0x34) = 0;                   // TIM1_CCR1 (start at 0)

    *(volatile uint32_t *)(0x40012C00 + 0x20) |= (6 << 4);           // TIM1_CCMR1: PWM1 mode
    *(volatile uint32_t *)(0x40012C00 + 0x20) |= (1 << 3);           // Enable preload
    *(volatile uint32_t *)(0x40012C00 + 0x00C) |= (1 << 0);          // TIM1_CCER: Enable CH1 output

    *(volatile uint32_t *)(0x40012C00 + 0x44) |= (1 << 7);           // BDTR: MOE enable

    // 5. Enable Update Interrupt
    *(volatile uint32_t *)(0x40012C00 + 0x0C) |= (1 << 0);           // DIER: UIE
    *(volatile uint32_t *)(0xE000E100) |= (1 << 25);                 // NVIC ISER0: TIM1_UP_IRQn

    // 6. Start timer
    *(volatile uint32_t *)(0x40012C00 + 0x00) |= (1 << 0);           // TIM1_CR1: CEN
    *(volatile uint32_t *)(0x40012C00 + 0x00) |= (1 << 7);           // ARPE enable

    // 7. Configure update rate to 100Hz (for 100 samples â†’ 1Hz sin)
    // Already done via PSC = 72, ARR = 999

    while (1) {
        // main loop does nothing
    }
}
