#include "stm32f4xx.h"

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    GPIOA->MODER |= (2 << 4) | (2 << 6);  // PA2, PA3: AF mode
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12); // AF7: UART2
    USART2->BRR = 0x8B;  // 115200 baud (HCLK = 16MHz)
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}

void UART2_SendString(char *str) {
    while (*str) UART2_SendChar(*str++);
}

void int_to_string(int num, char *str) {
    sprintf(str, "%d", num);
}

// === Delay function (simple blocking delay) ===
void delay_ms(volatile uint32_t ms) {
    for (volatile uint32_t i = 0; i < ms * 8000; i++);
}

// === Main ===
int main(void) {
    UART2_Init();

    uint8_t led1_state = 0;
    uint8_t led2_state = 0;
    char msg[50];

    while (1) {
        // Check PB0 (button 1) active low
        if (!(GPIOB->IDR & (1 << 0))) {
            delay_ms(50);
            if (!(GPIOB->IDR & (1 << 0))) {
                led1_state ^= 1;
                if (led1_state)
                    GPIOA->ODR |= (1 << 5);
                else
                    GPIOA->ODR &= ~(1 << 5);

                UART2_SendString("PB0 PRESSED -> LED1 = ");
                int_to_string(led1_state, msg);
                UART2_SendString(msg);
                UART2_SendString("\n");

                while (!(GPIOB->IDR & (1 << 0))); // Wait button release
            }
        }

        // Check PB1 (button 2) active low
        if (!(GPIOB->IDR & (1 << 1))) {
            delay_ms(50);
            if (!(GPIOB->IDR & (1 << 1))) {
                led2_state ^= 1;
                if (led2_state)
                    GPIOA->ODR |= (1 << 6);
                else
                    GPIOA->ODR &= ~(1 << 6);

                UART2_SendString("PB1 PRESSED -> LED2 = ");
                int_to_string(led2_state, msg);
                UART2_SendString(msg);
                UART2_SendString("\n");

                while (!(GPIOB->IDR & (1 << 1))); // Wait button release
            }
        }
    }
}
