#include "main.h"

TIM_HandleTypeDef htim2;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM2_Init(void);

int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_TIM2_Init();

  HAL_TIM_Base_Start_IT(&htim2);  // Bắt đầu Timer2 với ngắt

  while (1)
  {
    // Không cần gì trong vòng lặp chính
  }
}

// Biến đếm cho ngắt
volatile uint32_t counter_1hz = 0;
volatile uint32_t counter_10hz = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim->Instance == TIM2)
  {
    counter_1hz++;
    counter_10hz++;

    if (counter_10hz >= 5)  // 5 x 2ms = 10Hz
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);  // LED A5
      counter_10hz = 0;
    }

    if (counter_1hz >= 500)  // 500 x 2ms = 1Hz
    {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);  // LED A4
      counter_1hz = 0;
    }
  }
}

void MX_TIM2_Init(void)
{
  __HAL_RCC_TIM2_CLK_ENABLE();

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8399;  // 84MHz / (8399+1) = 10kHz
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 19;       // 10kHz / (19+1) = 500Hz → 2ms
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);

  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
}

void MX_GPIO_Init(void)
{
  __HAL_RCC_GPIOA_CLK_ENABLE();

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
}

void TIM2_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&htim2);
}

