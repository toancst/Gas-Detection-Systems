#include "stm32f4xx.h"
#include <stdio.h>
#include <string.h>

#define VREF        3.3f
#define ADC_MAX     4095.0f
#define THRESHOLD   0.05f  // Ngưỡng thay đổi tối thiểu (50 mV)

void delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1; // 1ms với HCLK 16MHz
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    while (ms--) {
        while (!(SysTick->CTRL & 0x10000));
    }
    SysTick->CTRL = 0;
}

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    GPIOA->MODER |= (2 << 4) | (2 << 6);  // PA2, PA3: alternate function
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12); // AF7 for USART2

    USART2->BRR = 0x8B; // 115200 baud (16 MHz clock)
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}

void UART2_SendString(const char *str) {
    while (*str) UART2_SendChar(*str++);
}

void float_to_string(float num, char *str) {
    int int_part = (int)num;
    int frac_part = (int)((num - int_part) * 100); // 2 chữ số
    if (frac_part < 0) frac_part = -frac_part;

    sprintf(str, "%d.%02d", int_part, frac_part);
}

void ADC_Init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;

    GPIOB->MODER |= (3 << (0 * 2)) | (3 << (1 * 2)); // PB0 & PB1 = analog mode

    ADC1->SQR3 = 8; // channel 8 (PB0) default
    ADC1->SMPR2 |= (7 << (3 * 8)) | (7 << (3 * 9)); // 480 cycles sample time

    ADC1->CR2 |= ADC_CR2_ADON;
}

uint16_t ADC_Read(uint8_t channel) {
    ADC1->SQR3 = channel;
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return ADC1->DR;
}

float ADC_to_Voltage(uint16_t adc_val) {
    return (adc_val * VREF) / ADC_MAX;
}

int main(void) {
    UART2_Init();
    ADC_Init();

    float prev_v0 = 0.0f, prev_v1 = 0.0f;
    char msg[64], volt_str[16];

    while (1) {
        uint16_t adc0 = ADC_Read(8); // PB0 = channel 8
        uint16_t adc1 = ADC_Read(9); // PB1 = channel 9

        float v0 = ADC_to_Voltage(adc0);
        float v1 = ADC_to_Voltage(adc1);

        float delta0 = v0 - prev_v0;
        float delta1 = v1 - prev_v1;

        if (fabs(delta0) > THRESHOLD) {
            float_to_string(fabs(delta0), volt_str);
            sprintf(msg, "PB0 ----- %s by %s V\n", delta0 > 0 ? "rose" : "dropped", volt_str);
            UART2_SendString(msg);
            prev_v0 = v0;
        }

        if (fabs(delta1) > THRESHOLD) {
            float_to_string(fabs(delta1), volt_str);
            sprintf(msg, "PB1 ----- %s by %s V\n", delta1 > 0 ? "rose" : "dropped", volt_str);
            UART2_SendString(msg);
            prev_v1 = v1;
        }

        delay_ms(1000); // delay giữa các lần đọc
    }
}
