#include "stm32f4xx.h"
#include <stdio.h>
#include <math.h>

#define MQ2_PIN_PORT    GPIOA
#define MQ2_PIN         0

#define LED_GREEN_PORT  GPIOA
#define LED_GREEN_PIN   4   // LED xanh A4
#define LED_YELLOW_PORT GPIOA
#define LED_YELLOW_PIN  5   // LED vàng A5
#define LED_RED_PORT    GPIOA
#define LED_RED_PIN     6   // LED đỏ A6

#define GAS_THRESHOLD_LOW   300
#define GAS_THRESHOLD_MID   900
#define GAS_THRESHOLD_HIGH  1600
#define GAS_THRESHOLD_BUZZER 1200

#define PI 3.14159265
#define SAMPLES 100

volatile uint16_t pwm_table[SAMPLES];
volatile uint32_t current_index = 0;
volatile uint8_t buzzer_active = 0;

volatile uint32_t timer_counter = 0;
volatile uint32_t led_red_counter = 0;
volatile uint8_t led_red_state = 0;
volatile uint8_t led_red_frequency = 1;  // Tần số LED đỏ (1-10Hz)
volatile uint16_t current_gas_value = 0;

void UART2_Init(void);
void UART2_SendChar(uint8_t c);
void UART2_SendString(char *str);
void ADC1_Init(void);
uint16_t ADC1_Read(void);
void LED_Init(void);
void TIM2_Init(void);
void LED_Control(uint16_t gasValue);
void Send_System_Status(uint16_t gasValue);
uint8_t Calculate_Red_LED_Frequency(uint16_t gasValue);

void delay_ms(uint32_t ms);
void make_triangle_sin_table();
void init_pwm();
void update_pwm();

int main(void) {
    SystemCoreClockUpdate();
    UART2_Init();
    ADC1_Init();
    LED_Init();
    TIM2_Init();
    init_pwm();
    make_triangle_sin_table();

    char buffer[100];
    uint16_t gasValue;

    while (1) {
        gasValue = ADC1_Read();
        current_gas_value = gasValue;
        LED_Control(gasValue);
        Send_System_Status(gasValue);
        if (gasValue >= GAS_THRESHOLD_BUZZER) {
                buzzer_active = 1;
                update_pwm();
        } else {
        	buzzer_active = 0;
        	update_pwm();
        }
        delay_ms(20);
    }
}

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    GPIOA->MODER |= (2 << 4) | (2 << 6);  // PA2, PA3: AF mode
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12); // AF7: UART2
    USART2->BRR = 0x8B;  // 115200 baud (HCLK = 16MHz)
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}
void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}
void UART2_SendString(char *str) {
    while (*str) UART2_SendChar(*str++);
}
void ADC1_Init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    MQ2_PIN_PORT->MODER |= (3 << (MQ2_PIN * 2));
    ADC1->SQR1 = 0; // 1 chuyển đổi
    ADC1->SQR3 = 0; // Chuyển đổi kênh 0 (PA0)
    ADC1->CR2 |= ADC_CR2_ADON;
    for(volatile uint32_t i = 0; i < 10000; i++);
}

uint16_t ADC1_Read(void) {
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return (uint16_t)ADC1->DR;
}
void LED_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // Cấu hình PA4, PA5, PA6 là output
    GPIOA->MODER &= ~((3 << (LED_GREEN_PIN * 2)) | (3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)));
    GPIOA->MODER |= (1 << (LED_GREEN_PIN * 2)) | (1 << (LED_YELLOW_PIN * 2)) | (1 << (LED_RED_PIN * 2));
    GPIOA->OTYPER &= ~((1 << LED_GREEN_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_RED_PIN));
    GPIOA->OSPEEDR |= ((3 << (LED_GREEN_PIN * 2)) | (3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)));
    GPIOA->PUPDR &= ~((3 << (LED_GREEN_PIN * 2)) | (3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)));

    // Tắt tất cả LED ban đầu
    GPIOA->BSRR = (1 << (LED_GREEN_PIN + 16)) | (1 << (LED_YELLOW_PIN + 16)) | (1 << (LED_RED_PIN + 16));
}
void TIM2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;

    // Cấu hình Timer 2
    // System clock = 84MHz, prescaler = 8400-1 -> timer clock = 10kHz
    TIM2->PSC = 8400 - 1;  // Prescaler
    TIM2->ARR = 10 - 1;    // Auto-reload (10ms period = 100Hz interrupt)
    TIM2->DIER |= TIM_DIER_UIE;
    TIM2->CR1 |= TIM_CR1_CEN;
    NVIC_EnableIRQ(TIM2_IRQn);
    NVIC_SetPriority(TIM2_IRQn, 0);
}
uint8_t Calculate_Red_LED_Frequency(uint16_t gasValue) {
    if (gasValue < GAS_THRESHOLD_MID) {
        return 0; // Không nháy
    } else if (gasValue >= GAS_THRESHOLD_HIGH) {
        return 10; // 10Hz
    } else {
        // Chia khoảng 900-1600 thành 10 mức (1-10Hz)
        uint16_t range = GAS_THRESHOLD_HIGH - GAS_THRESHOLD_MID; // 700
        uint16_t step = range / 10; // 70
        uint8_t frequency = ((gasValue - GAS_THRESHOLD_MID) / step) + 1;
        if (frequency > 10) frequency = 10;
        return frequency;
    }
}
void LED_Control(uint16_t gasValue) {
    // Tắt tất cả LED trước
    GPIOA->BSRR = (1 << (LED_GREEN_PIN + 16)) | (1 << (LED_YELLOW_PIN + 16));

    if (gasValue < GAS_THRESHOLD_LOW) {
        // Bật LED xanh
        GPIOA->BSRR = (1 << LED_GREEN_PIN);
        led_red_frequency = 0;
    } else if (gasValue < GAS_THRESHOLD_MID) {
        // Bật LED vàng
        GPIOA->BSRR = (1 << LED_YELLOW_PIN);
        led_red_frequency = 0;
    } else {
        // Tính tần số cho LED đỏ
        led_red_frequency = Calculate_Red_LED_Frequency(gasValue);
    }
}
void Send_System_Status(uint16_t gasValue) {
    char buffer[150];

    sprintf(buffer, "Gas Value: %d | ", gasValue);
    UART2_SendString(buffer);

    if (gasValue < GAS_THRESHOLD_LOW) {
        UART2_SendString("Status: SAFE (Green LED ON) | ");
    } else if (gasValue < GAS_THRESHOLD_MID) {
        UART2_SendString("Status: CAUTION (Yellow LED ON) | ");
    } else if (gasValue < GAS_THRESHOLD_HIGH) {
        sprintf(buffer, "Status: WARNING (Red LED: %dHz) | ", led_red_frequency);
        UART2_SendString(buffer);
    } else {
        UART2_SendString("Status: DANGER (Red LED: 10Hz) | ");
    }

    sprintf(buffer, "Time: %lu ms\r\n", timer_counter * 10);
    UART2_SendString(buffer);
}
void TIM2_IRQHandler(void) {
    if (TIM2->SR & TIM_SR_UIF) {
        // Xóa interrupt flag
        TIM2->SR &= ~TIM_SR_UIF;

        timer_counter++;

        // Xử lý LED đỏ nhấp nháy
        if (led_red_frequency > 0) {
            led_red_counter++;
            // Tính period dựa trên tần số (Hz)
            // Period = 100 / (2 * frequency) để có chu kỳ bật/tắt
            uint32_t led_red_period = 50 / led_red_frequency;

            if (led_red_counter >= led_red_period) {
                // Toggle LED đỏ
                GPIOA->ODR ^= (1 << LED_RED_PIN);
                led_red_counter = 0;
            }
        } else {
            // Tắt LED đỏ khi không cần nháy
            GPIOA->BSRR = (1 << (LED_RED_PIN + 16));
            led_red_counter = 0;
        }
    }
}

void make_triangle_sin_table() {
    for (int i = 0; i < SAMPLES; i++) {
        float phase = (float)i / SAMPLES;
        float triangle = phase < 0.5f ? (2.0f * phase) : (2.0f * (1.0f - phase));
        float sin_mod = (sinf(2 * PI * phase) + 1.0f) / 2.0f;
        pwm_table[i] = (uint16_t)(triangle * sin_mod * 999);
    }
}

// Hàm tạo độ trễ theo mili giây
void delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    for(uint32_t i = 0; i < ms; i++) {
        while(!(SysTick->CTRL & (1 << 16)));
    }
    SysTick->CTRL = 0;
}

// Hàm khởi tạo GPIOA và TIM1 để tạo PWM
void init_pwm() {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;

    GPIOA->MODER &= ~(3 << (8 * 2));
    GPIOA->MODER |=  (2 << (8 * 2));
    GPIOA->AFR[1] &= ~(0xF << ((8 - 8) * 4));
    GPIOA->AFR[1] |=  (1 << ((8 - 8) * 4));

    TIM1->PSC = 83;
    TIM1->ARR = 999;

    TIM1->CCMR1 |= (6 << 4);
    TIM1->CCMR1 |= (1 << 3);

    TIM1->CCER |= TIM_CCER_CC1E;
    TIM1->CR1 |= TIM_CR1_ARPE;
    TIM1->BDTR |= TIM_BDTR_MOE;
    TIM1->CR1 |= TIM_CR1_CEN;

    TIM1->EGR |= TIM_EGR_UG;
}

// Hàm cập nhật giá trị PWM từ bảng điều chế
void update_pwm() {
    if(buzzer_active == 1){
        TIM1->CCR1 = pwm_table[current_index];
        current_index = (current_index + 1) % SAMPLES;
    } else{
    	TIM1->CCR1 = 0;
    }
}
