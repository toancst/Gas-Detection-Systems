#include "stm32f4xx.h"
#include <stdio.h>
#include <string.h>

#define VREF        3.3f
#define ADC_MAX     4095.0f
#define PRESS_THRESHOLD 1.5f  // Nếu điện áp > 1.5V → xem như nút đang được nhấn

void delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    while (ms--) {
        while (!(SysTick->CTRL & 0x10000));
    }
    SysTick->CTRL = 0;
}

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    GPIOA->MODER |= (2 << 4) | (2 << 6);  // PA2, PA3 = alternate
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12); // AF7

    USART2->BRR = 0x8B; // 115200
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}

void UART2_SendString(const char *str) {
    while (*str) UART2_SendChar(*str++);
}

void ADC_Init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;

    GPIOB->MODER |= (3 << (0 * 2)) | (3 << (1 * 2)); // PB0, PB1 = analog

    ADC1->SMPR2 |= (7 << (3 * 8)) | (7 << (3 * 9)); // 480 cycles
    ADC1->CR2 |= ADC_CR2_ADON;
}

uint16_t ADC_Read(uint8_t channel) {
    ADC1->SQR3 = channel;
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return ADC1->DR;
}

float ADC_to_Voltage(uint16_t val) {
    return (val * VREF) / ADC_MAX;
}

int main(void) {
    UART2_Init();
    ADC_Init();

    uint8_t pb0_prev = 0, pb1_prev = 0;

    while (1) {
        float v0 = ADC_to_Voltage(ADC_Read(8)); // PB0
        float v1 = ADC_to_Voltage(ADC_Read(9)); // PB1

        uint8_t pb0_now = (v0 > PRESS_THRESHOLD) ? 1 : 0;
        uint8_t pb1_now = (v1 > PRESS_THRESHOLD) ? 1 : 0;

        if (pb0_now && !pb0_prev) {
            UART2_SendString("PB0 pressed\n");
        }
        if (pb1_now && !pb1_prev) {
            UART2_SendString("PB1 pressed\n");
        }

        pb0_prev = pb0_now;
        pb1_prev = pb1_now;

        delay_ms(50); // debounce delay
    }
}
