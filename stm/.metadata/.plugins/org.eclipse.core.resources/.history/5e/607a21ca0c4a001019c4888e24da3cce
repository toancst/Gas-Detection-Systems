#include "stm32f4xx.h"
#include <math.h>
#include <stdbool.h>

#define PI 3.14159265
#define SAMPLES 100

volatile uint16_t pwm_table[SAMPLES];
volatile uint32_t current_index = 0;

// Hàm tạo bảng giá trị điều chế tam giác-sinus
void make_triangle_sin_table() {
    for (int i = 0; i < SAMPLES; i++) {
        float phase = (float)i / SAMPLES;
        float triangle = phase < 0.5f ? (2.0f * phase) : (2.0f * (1.0f - phase));
        float sin_mod = (sinf(2 * PI * phase) + 1.0f) / 2.0f;
        pwm_table[i] = (uint16_t)(triangle * sin_mod * 999);
    }
}

// Hàm tạo độ trễ theo mili giây
void delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    for(uint32_t i = 0; i < ms; i++) {
        while(!(SysTick->CTRL & (1 << 16)));
    }
    SysTick->CTRL = 0;
}

// Hàm khởi tạo GPIOA và TIM1 để tạo PWM
void init_pwm() {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;

    GPIOA->MODER &= ~(3 << (8 * 2));
    GPIOA->MODER |=  (2 << (8 * 2));
    GPIOA->AFR[1] &= ~(0xF << ((8 - 8) * 4));
    GPIOA->AFR[1] |=  (1 << ((8 - 8) * 4));

    TIM1->PSC = 83;
    TIM1->ARR = 999;

    TIM1->CCMR1 |= (6 << 4);
    TIM1->CCMR1 |= (1 << 3);

    TIM1->CCER |= TIM_CCER_CC1E;
    TIM1->CR1 |= TIM_CR1_ARPE;
    TIM1->BDTR |= TIM_BDTR_MOE;
    TIM1->CR1 |= TIM_CR1_CEN;

    TIM1->EGR |= TIM_EGR_UG;
}

// Hàm cập nhật giá trị PWM từ bảng điều chế
void update_pwm() {
    TIM1->CCR1 = pwm_table[current_index];
    current_index = (current_index + 1) % SAMPLES;
}

// Hàm điều khiển buzzer
bool buzzer(uint8_t state) {
    if (state) {
        TIM1->CCR1 = 500; // Giá trị PWM để bật buzzer (có thể điều chỉnh)
    } else {
        TIM1->CCR1 = 0;   // Tắt buzzer
    }
    return state;
}

int main(void) {
    init_pwm();
    make_triangle_sin_table();

    while (1) {
        update_pwm();
        delay_ms(10);
        buzzer(1);  // Bật buzzer
        delay_ms(500);
        buzzer(0);  // Tắt buzzer
        delay_ms(500);
    }
}
