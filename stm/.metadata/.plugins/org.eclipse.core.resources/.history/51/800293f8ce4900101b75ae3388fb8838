#include "stm32f4xx.h"
#include <stdio.h> // Cần thiết cho hàm sprintf

// --- Định nghĩa chân và ngưỡng ---
// Chân Analog cho cảm biến MQ-2 (A0 trên board Arduino tương ứng PA0 trên nhiều board STM32)
#define MQ2_PIN_PORT    GPIOA
#define MQ2_PIN         0

// Chân cho LED (Bạn có thể đổi sang chân khác nếu cần)
#define LED_RED_PORT    GPIOC
#define LED_RED_PIN     13  // Thường là LED tích hợp trên board Blue/Black Pill
#define LED_GREEN_PORT  GPIOB
#define LED_GREEN_PIN   0

// Ngưỡng cảnh báo khí gas
#define GAS_THRESHOLD   600 // Tương tự code Arduino

// --- Khai báo hàm ---
void UART2_Init(void);
void UART2_SendChar(uint8_t c);
void UART2_SendString(char *str);
void ADC1_Init(void);
uint16_t ADC1_Read(void);
void LED_Init(void);
void DelayMs(uint32_t ms);


// --- Hàm Main ---
int main(void) {
    // Khởi tạo các ngoại vi
    UART2_Init();
    ADC1_Init();
    LED_Init();

    char buffer[50];
    uint16_t gasValue;

    UART2_SendString("MQ-2 Sensor Initialized!\r\n");
    UART2_SendString("------------------------\r\n");

    while (1) {
        // Đọc giá trị từ cảm biến MQ-2
        gasValue = ADC1_Read();

        // Gửi giá trị lên UART
        sprintf(buffer, "Gas Value: %d\r\n", gasValue);
        UART2_SendString(buffer);

        // So sánh với ngưỡng và điều khiển LED
        if (gasValue > GAS_THRESHOLD) {
            UART2_SendString("Warning! High gas or smoke levels detected!\r\n");

            // Bật LED đỏ, tắt LED xanh
            // Lưu ý: LED trên PC13 thường là active-low (bật khi chân ở mức 0)
            LED_RED_PORT->BSRR = (1 << (LED_RED_PIN + 16)); // Reset pin PC13 (bật LED)
            LED_GREEN_PORT->BSRR = (1 << (LED_GREEN_PIN + 16)); // Reset pin PB0 (tắt LED)

        } else {
            // Tắt LED đỏ, bật LED xanh
            LED_RED_PORT->BSRR = (1 << LED_RED_PIN); // Set pin PC13 (tắt LED)
            LED_GREEN_PORT->BSRR = (1 << LED_GREEN_PIN); // Set pin PB0 (bật LED)
        }

        UART2_SendString("\r\n"); // Thêm một dòng trống để dễ đọc

        // Chờ 500ms
        DelayMs(500);
    }
}

// --- Các hàm khởi tạo và chức năng ---

/**
 * @brief Khởi tạo UART2 ở 115200 baud
 * TX: PA2
 * RX: PA3
 */
void UART2_Init(void) {
    // Cấp clock cho USART2 và GPIOA
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // Cấu hình PA2, PA3 là chân chức năng thay thế (Alternate Function)
    GPIOA->MODER &= ~((3 << 4) | (3 << 6)); // Xóa bit cũ
    GPIOA->MODER |= (2 << 4) | (2 << 6);  // PA2, PA3: AF mode

    // Chọn AF7 cho PA2, PA3 (chức năng UART2)
    GPIOA->AFR[0] &= ~((0xF << 8) | (0xF << 12)); // Xóa bit cũ
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12);

    // Cấu hình Baud Rate 115200 với HCLK = 16MHz (mặc định)
    // (16,000,000) / (16 * 115200) = 8.68
    // Mantissa = 8, Fraction = 0.68 * 16 = 10.88 ~ 11 (0xB)
    // BRR = (8 << 4) | 11 = 0x8B
    USART2->BRR = 0x8B;

    // Bật bộ truyền (TE) và bật USART (UE)
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

/**
 * @brief Gửi một ký tự qua UART2
 */
void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE)); // Chờ cho thanh ghi dữ liệu trống
    USART2->DR = c;
}

/**
 * @brief Gửi một chuỗi ký tự qua UART2
 */
void UART2_SendString(char *str) {
    while (*str) {
        UART2_SendChar(*str++);
    }
}

/**
 * @brief Khởi tạo ADC1 để đọc từ kênh 0 (PA0)
 */
void ADC1_Init(void) {
    // Cấp clock cho ADC1 và GPIOA
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // Cấu hình chân PA0 là Analog
    MQ2_PIN_PORT->MODER |= (3 << (MQ2_PIN * 2)); // Chế độ Analog cho PA0

    // Cấu hình ADC
    ADC1->SQR1 = 0; // 1 chuyển đổi
    ADC1->SQR3 = 0; // Chuyển đổi kênh 0 (PA0)
    //ADC1->CR2 |= ADC_CR2_CONT; // Chế độ chuyển đổi liên tục (tùy chọn)

    // Bật ADC
    ADC1->CR2 |= ADC_CR2_ADON;
    DelayMs(1); // Chờ ADC ổn định
}

/**
 * @brief Đọc giá trị từ ADC1 (kênh đã cấu hình)
 * @return Giá trị ADC 12-bit (0-4095)
 */
uint16_t ADC1_Read(void) {
    // Bắt đầu chuyển đổi
    ADC1->CR2 |= ADC_CR2_SWSTART;

    // Chờ cho chuyển đổi hoàn tất (cờ EOC - End Of Conversion)
    while (!(ADC1->SR & ADC_SR_EOC));

    // Đọc và trả về giá trị
    return (uint16_t)ADC1->DR;
}

/**
 * @brief Khởi tạo các chân GPIO cho LED
 */
void LED_Init(void) {
    // Cấp clock cho GPIOB và GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN;

    // Cấu hình chân LED đỏ (PC13) là output
    LED_RED_PORT->MODER &= ~(3 << (LED_RED_PIN * 2)); // Xóa bit cũ
    LED_RED_PORT->MODER |= (1 << (LED_RED_PIN * 2));  // Chế độ General purpose output

    // Cấu hình chân LED xanh (PB0) là output
    LED_GREEN_PORT->MODER &= ~(3 << (LED_GREEN_PIN * 2)); // Xóa bit cũ
    LED_GREEN_PORT->MODER |= (1 << (LED_GREEN_PIN * 2));  // Chế độ General purpose output

    // Tắt cả 2 LED lúc khởi động
    // LED đỏ (PC13) là active-low, set pin để tắt
    LED_RED_PORT->BSRR = (1 << LED_RED_PIN);
    // LED xanh (PB0) là active-high, reset pin để tắt
    LED_GREEN_PORT->BSRR = (1 << (LED_GREEN_PIN + 16));
}

/**
 * @brief Hàm delay đơn giản (không chính xác tuyệt đối)
 */
void DelayMs(uint32_t ms) {
    for (volatile uint32_t i = 0; i < ms * 4000; i++); // Giá trị 4000 được hiệu chỉnh cho 16MHz
}
