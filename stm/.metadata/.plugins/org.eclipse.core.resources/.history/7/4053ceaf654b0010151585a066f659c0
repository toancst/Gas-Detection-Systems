#include "stm32f4xx.h"
#include <stdio.h>
#include <math.h>

#define MQ2_PIN_PORT    GPIOA
#define MQ2_PIN         0

#define LED_GREEN_PORT  GPIOA
#define LED_GREEN_PIN   4
#define LED_YELLOW_PORT GPIOA
#define LED_YELLOW_PIN  5
#define LED_RED_PORT    GPIOA
#define LED_RED_PIN     6
#define LED_STOP_PORT   GPIOA
#define LED_STOP_PIN    7

#define PB0_PORT        GPIOB
#define PB0_PIN         0
#define PB1_PORT        GPIOB
#define PB1_PIN         1

#define GAS_THRESHOLD_LOW   300
#define GAS_THRESHOLD_MID   900
#define GAS_THRESHOLD_HIGH  1600
#define GAS_THRESHOLD_BUZZER 1200

#define PI 3.14159265
#define SAMPLES 100
#define VREF 3.3f
#define ADC_MAX 4095.0f
#define PRESS_THRESHOLD 1.5f

volatile uint16_t pwm_table[SAMPLES];
volatile uint32_t current_index = 0;
volatile uint8_t buzzer_active = 0;

volatile uint32_t timer_counter = 0;
volatile uint32_t led_red_counter = 0;
volatile uint8_t led_red_state = 0;
volatile uint8_t led_red_frequency = 1;
volatile uint16_t current_gas_value = 0;

volatile uint8_t stop_mode_enabled = 0;
volatile uint32_t stop_mode_timer = 0;
volatile uint8_t stop_mode_protection = 0;
volatile uint8_t pb1_prev_state = 0;

// Thêm biến cho nút reset PB0
volatile uint8_t pb0_prev_state = 0;
volatile uint32_t reset_protection_timer = 0;
volatile uint8_t reset_protection_active = 0;

void UART2_Init(void);
void UART2_SendChar(uint8_t c);
void UART2_SendString(char *str);
void ADC1_Init(void);
uint16_t ADC1_Read(void);
void LED_Init(void);
void TIM2_Init(void);
void PB0_Init(void);
void PB1_Init(void);
void LED_Control(uint16_t gasValue);
void Send_System_Status(uint16_t gasValue);
uint8_t Calculate_Red_LED_Frequency(uint16_t gasValue);
void Handle_PB0_Press(void);
void Handle_PB1_Press(void);
void Enter_Stop_Mode(void);
void Exit_Stop_Mode(void);
float ADC_to_Voltage(uint16_t val);
uint16_t Read_PB0_ADC(void);
uint16_t Read_PB1_ADC(void);
void System_Reset(void);

void delay_ms(uint32_t ms);
void make_triangle_sin_table();
void init_pwm();
void update_pwm();

int main(void) {
    SystemCoreClockUpdate();
    UART2_Init();
    ADC1_Init();
    LED_Init();
    PB0_Init();
    PB1_Init();
    TIM2_Init();
    init_pwm();
    make_triangle_sin_table();

    // Khởi tạo bảo vệ reset trong 5 giây đầu
    reset_protection_active = 1;
    reset_protection_timer = 0;

    uint16_t gasValue;

    while (1) {
        if (!stop_mode_enabled) {
            gasValue = ADC1_Read();
            current_gas_value = gasValue;
            LED_Control(gasValue);
            Send_System_Status(gasValue);

            if (gasValue >= GAS_THRESHOLD_BUZZER) {
                buzzer_active = 1;
                update_pwm();
            } else {
                buzzer_active = 0;
                update_pwm();
            }
        }

        Handle_PB0_Press();
        Handle_PB1_Press();
        delay_ms(10);
    }
}

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    GPIOA->MODER |= (2 << 4) | (2 << 6);
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12);
    USART2->BRR = 0x8B;
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}

void UART2_SendString(char *str) {
    while (*str) UART2_SendChar(*str++);
}

void ADC1_Init(void) {
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;

    MQ2_PIN_PORT->MODER |= (3 << (MQ2_PIN * 2));
    PB0_PORT->MODER |= (3 << (PB0_PIN * 2));
    PB1_PORT->MODER |= (3 << (PB1_PIN * 2));

    ADC1->SMPR2 |= (7 << (3 * 9));
    ADC1->SQR1 = 0;
    ADC1->SQR3 = 0;
    ADC1->CR2 |= ADC_CR2_ADON;
    for(volatile uint32_t i = 0; i < 10000; i++);
}

uint16_t ADC1_Read(void) {
    ADC1->SQR3 = 0;
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return (uint16_t)ADC1->DR;
}

uint16_t Read_PB0_ADC(void) {
    ADC1->SQR3 = 8;  // PB0 - ADC channel 8
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return (uint16_t)ADC1->DR;
}

uint16_t Read_PB1_ADC(void) {
    ADC1->SQR3 = 9;  // PB1 - ADC channel 9
    ADC1->CR2 |= ADC_CR2_SWSTART;
    while (!(ADC1->SR & ADC_SR_EOC));
    return (uint16_t)ADC1->DR;
}

float ADC_to_Voltage(uint16_t val) {
    return (val * VREF) / ADC_MAX;
}

void PB0_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    PB0_PORT->MODER |= (3 << (PB0_PIN * 2));  // Analog mode
}

void PB1_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
    PB1_PORT->MODER |= (3 << (PB1_PIN * 2));  // Analog mode
}

void LED_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // Cấu hình cho LED Green, Yellow, Red và Stop
    GPIOA->MODER &= ~((3 << (LED_GREEN_PIN * 2)) | (3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)) | (3 << (LED_STOP_PIN * 2)));
    GPIOA->MODER |= (1 << (LED_GREEN_PIN * 2)) | (1 << (LED_YELLOW_PIN * 2)) | (1 << (LED_RED_PIN * 2)) | (1 << (LED_STOP_PIN * 2));
    GPIOA->OTYPER &= ~((1 << LED_GREEN_PIN) | (1 << LED_YELLOW_PIN) | (1 << LED_RED_PIN) | (1 << LED_STOP_PIN));
    GPIOA->OSPEEDR |= ((3 << (LED_GREEN_PIN * 2)) | (3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)) | (3 << (LED_STOP_PIN * 2)));
    GPIOA->PUPDR &= ~((3 << (LED_GREEN_PIN * 2)) | (3 << (LED_YELLOW_PIN * 2)) | (3 << (LED_RED_PIN * 2)) | (3 << (LED_STOP_PIN * 2)));

    // Tắt tất cả LED ban đầu
    GPIOA->BSRR = (1 << (LED_GREEN_PIN + 16)) | (1 << (LED_YELLOW_PIN + 16)) | (1 << (LED_RED_PIN + 16)) | (1 << (LED_STOP_PIN + 16));
}

void TIM2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;

    TIM2->PSC = 8400 - 1;
    TIM2->ARR = 10 - 1;
    TIM2->DIER |= TIM_DIER_UIE;
    TIM2->CR1 |= TIM_CR1_CEN;
    NVIC_EnableIRQ(TIM2_IRQn);
    NVIC_SetPriority(TIM2_IRQn, 0);
}

uint8_t Calculate_Red_LED_Frequency(uint16_t gasValue) {
    if (gasValue < GAS_THRESHOLD_MID) {
        return 0;
    } else if (gasValue >= GAS_THRESHOLD_HIGH) {
        return 10;
    } else {
        uint16_t range = GAS_THRESHOLD_HIGH - GAS_THRESHOLD_MID;
        uint16_t step = range / 10;
        uint8_t frequency = ((gasValue - GAS_THRESHOLD_MID) / step) + 1;
        if (frequency > 10) frequency = 10;
        return frequency;
    }
}

void LED_Control(uint16_t gasValue) {
    // Tắt LED Green và Yellow trước
    GPIOA->BSRR = (1 << (LED_GREEN_PIN + 16)) | (1 << (LED_YELLOW_PIN + 16));

    if (gasValue < GAS_THRESHOLD_LOW) {
        GPIOA->BSRR = (1 << LED_GREEN_PIN);
        led_red_frequency = 0;
    } else if (gasValue < GAS_THRESHOLD_MID) {
        GPIOA->BSRR = (1 << LED_YELLOW_PIN);
        led_red_frequency = 0;
    } else {
        led_red_frequency = Calculate_Red_LED_Frequency(gasValue);
    }
}

void Send_System_Status(uint16_t gasValue) {
    char buffer[200];

    sprintf(buffer, "Gas: %d | ", gasValue);
    UART2_SendString(buffer);

    if (gasValue < GAS_THRESHOLD_LOW) {
        UART2_SendString("SAFE (Green) | ");
    } else if (gasValue < GAS_THRESHOLD_MID) {
        UART2_SendString("CAUTION (Yellow) | ");
    } else if (gasValue < GAS_THRESHOLD_HIGH) {
        sprintf(buffer, "WARNING (Red: %dHz) | ", led_red_frequency);
        UART2_SendString(buffer);
    } else {
        UART2_SendString("DANGER (Red: 10Hz) | ");
    }

    sprintf(buffer, "Stop Mode: %s | Reset Protection: %s | Time: %lu ms\r\n",
           stop_mode_enabled ? "ON" : "OFF",
           reset_protection_active ? "ACTIVE" : "INACTIVE",
           timer_counter * 10);
    UART2_SendString(buffer);
}

void Handle_PB0_Press(void) {
    float pb0_voltage = ADC_to_Voltage(Read_PB0_ADC());
    uint8_t pb0_current = (pb0_voltage > PRESS_THRESHOLD) ? 1 : 0;

    // Kiểm tra nhấn nút PB0 (reset button)
    if (pb0_current && !pb0_prev_state) {
        if (!reset_protection_active) {
            System_Reset();
        } else {
            UART2_SendString("Reset protection active - cannot reset yet\r\n");
        }
    }

    pb0_prev_state = pb0_current;
}

void Handle_PB1_Press(void) {
    float pb1_voltage = ADC_to_Voltage(Read_PB1_ADC());
    uint8_t pb1_current = (pb1_voltage > PRESS_THRESHOLD) ? 1 : 0;

    if (pb1_current && !pb1_prev_state) {
        if (!stop_mode_enabled) {
            Enter_Stop_Mode();
        } else if (!stop_mode_protection) {
            Exit_Stop_Mode();
        }
    }

    pb1_prev_state = pb1_current;
}

void System_Reset(void) {
    UART2_SendString("System Reset requested - Resetting in 1 second...\r\n");
    delay_ms(1000);  // Đợi để thông báo được gửi
    NVIC_SystemReset();
}

void Enter_Stop_Mode(void) {
    stop_mode_enabled = 1;
    stop_mode_protection = 1;
    stop_mode_timer = 0;

    UART2_SendString("Entering Stop Mode\r\n");

    // Tắt tất cả LED trạng thái khí gas
    GPIOA->BSRR = (1 << (LED_GREEN_PIN + 16)) | (1 << (LED_YELLOW_PIN + 16)) | (1 << (LED_RED_PIN + 16));

    // Bật LED Stop Mode (A7)
    GPIOA->BSRR = (1 << LED_STOP_PIN);

    buzzer_active = 0;
    update_pwm();
}

void Exit_Stop_Mode(void) {
    stop_mode_enabled = 0;
    stop_mode_protection = 0;
    stop_mode_timer = 0;

    UART2_SendString("Exiting Stop Mode\r\n");

    // Tắt LED Stop Mode (A7)
    GPIOA->BSRR = (1 << (LED_STOP_PIN + 16));
}

void TIM2_IRQHandler(void) {
    if (TIM2->SR & TIM_SR_UIF) {
        TIM2->SR &= ~TIM_SR_UIF;

        timer_counter++;

        // Xử lý bảo vệ stop mode
        if (stop_mode_protection) {
            stop_mode_timer++;
            if (stop_mode_timer >= 1000) {  // 10 giây
                stop_mode_protection = 0;
            }
        }

        // Xử lý bảo vệ reset
        if (reset_protection_active) {
            reset_protection_timer++;
            if (reset_protection_timer >= 500) {  // 5 giây (500 * 10ms)
                reset_protection_active = 0;
                UART2_SendString("Reset protection deactivated - Reset button now available\r\n");
            }
        }

        // Xử lý LED đỏ
        if (!stop_mode_enabled && led_red_frequency > 0) {
            led_red_counter++;
            uint32_t led_red_period = 50 / led_red_frequency;

            if (led_red_counter >= led_red_period) {
                GPIOA->ODR ^= (1 << LED_RED_PIN);
                led_red_counter = 0;
            }
        } else if (stop_mode_enabled) {
            // Đảm bảo LED Red tắt khi ở Stop Mode
            GPIOA->BSRR = (1 << (LED_RED_PIN + 16));
            led_red_counter = 0;
        }
    }
}

void make_triangle_sin_table() {
    for (int i = 0; i < SAMPLES; i++) {
        float phase = (float)i / SAMPLES;
        float triangle = phase < 0.5f ? (2.0f * phase) : (2.0f * (1.0f - phase));
        float sin_mod = (sinf(2 * PI * phase) + 1.0f) / 2.0f;
        pwm_table[i] = (uint16_t)(triangle * sin_mod * 999);
    }
}

void delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    for(uint32_t i = 0; i < ms; i++) {
        while(!(SysTick->CTRL & (1 << 16)));
    }
    SysTick->CTRL = 0;
}

void init_pwm() {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;

    GPIOA->MODER &= ~(3 << (8 * 2));
    GPIOA->MODER |=  (2 << (8 * 2));
    GPIOA->AFR[1] &= ~(0xF << ((8 - 8) * 4));
    GPIOA->AFR[1] |=  (1 << ((8 - 8) * 4));

    TIM1->PSC = 83;
    TIM1->ARR = 999;

    TIM1->CCMR1 |= (6 << 4);
    TIM1->CCMR1 |= (1 << 3);

    TIM1->CCER |= TIM_CCER_CC1E;
    TIM1->CR1 |= TIM_CR1_ARPE;
    TIM1->BDTR |= TIM_BDTR_MOE;
    TIM1->CR1 |= TIM_CR1_CEN;

    TIM1->EGR |= TIM_EGR_UG;
}

void update_pwm() {
    if(buzzer_active == 1){
        TIM1->CCR1 = pwm_table[current_index];
        current_index = (current_index + 1) % SAMPLES;
    } else{
        TIM1->CCR1 = 0;
    }
}
