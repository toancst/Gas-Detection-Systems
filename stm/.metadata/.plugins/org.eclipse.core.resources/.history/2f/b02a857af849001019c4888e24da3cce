#include "stm32f4xx.h"
#include <math.h>

#define PI 3.14159265
#define SAMPLES 100

volatile uint16_t pwm_table[SAMPLES];
volatile uint32_t current_index = 0;

void delay_ms(uint32_t ms) {
    SysTick->LOAD = 16000 - 1;
    SysTick->VAL = 0;
    SysTick->CTRL = 5;
    for(uint32_t i = 0; i < ms; i++) {
        while(!(SysTick->CTRL & (1 << 16)));
    }
    SysTick->CTRL = 0;
}

void make_triangle_sin_table() {
    for (int i = 0; i < SAMPLES; i++) {
        float phase = (float)i / SAMPLES;
        float triangle = phase < 0.5f ? (2.0f * phase) : (2.0f * (1.0f - phase));
        float sin_mod = (sinf(2 * PI * phase) + 1.0f) / 2.0f;
        pwm_table[i] = (uint16_t)(triangle * sin_mod * 999);
    }
}

int main(void) {
    // Enable GPIOA and TIM1 clocks
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;

    // Configure PA8 as alternate function (AF1 - TIM1_CH1)
    GPIOA->MODER &= ~(3 << (8 * 2));
    GPIOA->MODER |=  (2 << (8 * 2));
    GPIOA->AFR[1] &= ~(0xF << ((8 - 8) * 4));
    GPIOA->AFR[1] |=  (1 << ((8 - 8) * 4));

    // Set prescaler and ARR for PWM frequency ~10kHz
    TIM1->PSC = 83;          // 84 MHz / (83+1) = 1 MHz
    TIM1->ARR = 999;         // PWM freq = 1MHz / 1000 = 1kHz

    // Set PWM mode 1 on CH1
    TIM1->CCMR1 |= (6 << 4); // OC1M = 110: PWM mode 1
    TIM1->CCMR1 |= (1 << 3); // OC1PE: Preload enable

    // Enable output for CH1
    TIM1->CCER |= TIM_CCER_CC1E;

    // Enable auto-reload preload
    TIM1->CR1 |= TIM_CR1_ARPE;

    // Enable main output
    TIM1->BDTR |= TIM_BDTR_MOE;

    // Enable counter
    TIM1->CR1 |= TIM_CR1_CEN;

    // Generate update event to load registers
    TIM1->EGR |= TIM_EGR_UG;

    // Generate triangle-sin modulated table
    make_triangle_sin_table();

    while (1) {
        TIM1->CCR1 = pwm_table[current_index];
        current_index = (current_index + 1) % SAMPLES;
        delay_ms(10); // 100 steps * 10ms = 1Hz full wave
    }
}
