Ã  code lcd:
#include "lcd.h"
#include "i2c.h"
#include "stm32f4xx.h"

#define LCD_BACKLIGHT 0x08
#define LCD_ENABLE    0x04
#define LCD_CMD       0
#define LCD_DATA      1

void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms * 4000; i++) __NOP();
}

void lcd_send_nibble(uint8_t nibble, uint8_t mode) {
    uint8_t data = (nibble & 0xF0) | LCD_BACKLIGHT;
    if (mode == LCD_DATA) data |= 0x01;

    lcd_i2c_write(data | LCD_ENABLE);
    lcd_i2c_write(data & ~LCD_ENABLE);
}

void lcd_send_byte(uint8_t byte, uint8_t mode) {
    lcd_send_nibble(byte & 0xF0, mode);
    lcd_send_nibble((byte << 4) & 0xF0, mode);
}

void lcd_init(void) {
    delay_ms(100);
    lcd_send_nibble(0x30, LCD_CMD); delay_ms(5);
    lcd_send_nibble(0x30, LCD_CMD); delay_ms(1);
    lcd_send_nibble(0x30, LCD_CMD); delay_ms(1);
    lcd_send_nibble(0x20, LCD_CMD); delay_ms(1);

    lcd_send_byte(0x28, LCD_CMD);
    lcd_send_byte(0x08, LCD_CMD);
    lcd_send_byte(0x01, LCD_CMD); delay_ms(2);
    lcd_send_byte(0x06, LCD_CMD);
    lcd_send_byte(0x0C, LCD_CMD);
}

void lcd_set_cursor(uint8_t row, uint8_t col) {
    uint8_t pos[] = {0x80, 0xC0};
    lcd_send_byte(pos[row] + col, LCD_CMD);
}

void lcd_putc(char c) {
    lcd_send_byte(c, LCD_DATA);
    delay_ms(1);
}

void lcd_puts(char *s) {
    while (*s) lcd_putc(*s++);
}
