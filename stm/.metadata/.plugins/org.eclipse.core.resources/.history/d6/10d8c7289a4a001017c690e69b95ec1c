#include "stm32f4xx.h"
#include "stdio.h"

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;

    // PA2 (TX), PA3 (RX) in alternate function mode
    GPIOA->MODER |= (2 << 4) | (2 << 6);
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12); // AF7 for USART2

    USART2->BRR = 0x8B;  // Assuming HCLK = 16MHz -> 115200 baud
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void UART2_SendChar(uint8_t c) {
    while (!(USART2->SR & USART_SR_TXE));
    USART2->DR = c;
}

void UART2_SendString(char *str) {
    while (*str) UART2_SendChar(*str++);
}

void int_to_hex_string(uint8_t num, char *str) {
    sprintf(str, "0x%02X", num);
}

void I2C1_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;

    // PB6 = SCL, PB7 = SDA in AF4
    GPIOB->MODER |= (2 << (6 * 2)) | (2 << (7 * 2));
    GPIOB->AFR[0] |= (4 << (6 * 4)) | (4 << (7 * 4));
    GPIOB->OTYPER |= (1 << 6) | (1 << 7);
    GPIOB->OSPEEDR |= (3 << (6 * 2)) | (3 << (7 * 2));
    GPIOB->PUPDR |= (1 << (6 * 2)) | (1 << (7 * 2)); // pull-up

    I2C1->CR2 = 16;      // PCLK1 = 16MHz
    I2C1->CCR = 80;      // 100kHz
    I2C1->TRISE = 17;
    I2C1->CR1 = I2C_CR1_PE;
}

uint8_t I2C1_IsDeviceReady(uint8_t addr) {
    I2C1->CR1 |= I2C_CR1_START;
    while (!(I2C1->SR1 & I2C_SR1_SB));

    I2C1->DR = addr << 1;
    while (!(I2C1->SR1 & I2C_SR1_ADDR)) {
        if (I2C1->SR1 & I2C_SR1_AF) {
            I2C1->SR1 &= ~I2C_SR1_AF;
            I2C1->CR1 |= I2C_CR1_STOP;
            return 0; // Not ready
        }
    }

    volatile uint32_t temp = I2C1->SR1 | I2C1->SR2; // Clear ADDR
    I2C1->CR1 |= I2C_CR1_STOP;
    return 1; // Ready
}

int main(void) {
    UART2_Init();
    I2C1_Init();

    UART2_SendString("Starting I2C Scanning:\r\n");

    char hex_buffer[10];

    for (uint8_t i = 1; i < 128; i++) {
        if (I2C1_IsDeviceReady(i)) {
            int_to_hex_string(i, hex_buffer);
            UART2_SendString(hex_buffer);
            UART2_SendString(" ");
        }
    }

    UART2_SendString("\r\nDone!\r\n");

    while (1);
}
