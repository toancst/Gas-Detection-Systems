#include "stm32f4xx.h"
#include <stdio.h>

// ===================================================================
// --- ĐỊNH NGHĨA PHẦN CỨNG VÀ NGƯỠNG ---
// ===================================================================

// Cảm biến khí Gas
#define MQ2_PORT        GPIOA
#define MQ2_PIN         0

// Đèn LED
#define LED_GREEN_PORT  GPIOA
#define LED_GREEN_PIN   4
#define LED_YELLOW_PORT GPIOA
#define LED_YELLOW_PIN  5
#define LED_RED_PORT    GPIOA
#define LED_RED_PIN     6

// Còi
#define BUZZER_PORT     GPIOA
#define BUZZER_PIN      8

// Nút nhấn
#define BUTTON_PORT     GPIOB
#define BUTTON_PIN      0

// Ngưỡng giá trị Gas
#define GAS_THRESHOLD_YELLOW  300  // Dưới ngưỡng này là LED xanh
#define GAS_THRESHOLD_RED     900  // Dưới ngưỡng này là LED vàng
#define GAS_THRESHOLD_BUZZER  1200 // Trên ngưỡng này còi kêu
#define GAS_MAX_VALUE         2500 // Giá trị gas tối đa để tính tần số nháy

// ===================================================================
// --- BIẾN TOÀN CỤC ---
// ===================================================================

// Biến cho chương trình chính
volatile uint16_t gasValue = 0;
volatile uint8_t program_paused = 0; // 0 = running, 1 = paused

// Biến cho nút nhấn và debounce
volatile uint32_t last_interrupt_time = 0;
volatile uint32_t system_ticks_ms = 0; // Biến đếm ms toàn cục

// Biến cho LED đỏ nhấp nháy
volatile uint32_t red_led_blink_counter = 0;
volatile uint32_t red_led_blink_period_ms = 500; // Nửa chu kỳ nháy (ms)

// Bảng giá trị sóng sin (32 mẫu, 8-bit) cho còi
const uint8_t sine_wave[32] = {
  127, 152, 177, 199, 218, 234, 245, 253,
  255, 253, 245, 234, 218, 199, 177, 152,
  127, 102,  77,  55,  36,  20,   9,   1,
    0,   1,   9,  20,  36,  55,  77, 102
};

// ===================================================================
// --- KHAI BÁO HÀM ---
// ===================================================================

void SystemClock_Config(void);
void GPIO_Init_All(void);
void ADC1_Init(void);
uint16_t ADC1_Read(void);
void TIM2_Blink_Init(void);      // Timer cho LED đỏ nháy và system tick
void TIM1_SinePWM_Init(void);    // Timer cho còi
void EXTI0_Init(void);           // Interrupt cho nút nhấn
void UART2_Init(void);
void UART2_SendString(char *str);
void DelayMs(uint32_t ms);

// ===================================================================
// --- HÀM MAIN ---
// ===================================================================

int main(void) {
    // Giả sử System Clock đã được cấu hình ở 84MHz
    SystemCoreClockUpdate();

    // Khởi tạo tất cả các ngoại vi
    GPIO_Init_All();
    ADC1_Init();
    TIM2_Blink_Init();    // Khởi tạo timer nháy LED và tick hệ thống
    TIM1_SinePWM_Init();  // Khởi tạo timer PWM cho còi
    EXTI0_Init();         // Khởi tạo ngắt ngoài cho nút nhấn
    UART2_Init();         // Khởi tạo UART để gỡ lỗi

    char buffer[50];
    UART2_SendString("Gas monitoring system started!\r\n");

    // Bật ngắt toàn cục
    __enable_irq();

    while (1) {
        // VÒNG LẶP TẠM DỪNG: chương trình sẽ bị kẹt ở đây khi nút được nhấn lần 1
        // và sẽ thoát ra khi nút được nhấn lần 2 (thông qua interrupt)
        while (program_paused) {
            // Có thể thêm code để đưa vi điều khiển vào chế độ sleep để tiết kiệm năng lượng
            __WFI(); // Wait For Interrupt
        }

        // Đọc giá trị từ cảm biến MQ-2
        gasValue = ADC1_Read();

        // Gửi giá trị lên UART để theo dõi
        sprintf(buffer, "Gas Value: %4d | Status: ", gasValue);
        UART2_SendString(buffer);

        // --- Logic điều khiển LED và còi ---

        if (gasValue < GAS_THRESHOLD_YELLOW) {
            // Mức an toàn -> Bật LED xanh
            LED_GREEN_PORT->BSRR = (1 << LED_GREEN_PIN);
            LED_YELLOW_PORT->BSRR = (1 << (LED_YELLOW_PIN + 16));
            LED_RED_PORT->BSRR = (1 << (LED_RED_PIN + 16));

            // Tắt còi
            TIM1->CR1 &= ~TIM_CR1_CEN; // Tắt Timer1
            TIM1->BDTR &= ~TIM_BDTR_MOE; // Tắt đầu ra PWM chính

            UART2_SendString("SAFE\r\n");
        }
        else if (gasValue < GAS_THRESHOLD_RED) {
            // Mức cảnh báo -> Bật LED vàng
            LED_GREEN_PORT->BSRR = (1 << (LED_GREEN_PIN + 16));
            LED_YELLOW_PORT->BSRR = (1 << LED_YELLOW_PIN);
            LED_RED_PORT->BSRR = (1 << (LED_RED_PIN + 16));

            // Tắt còi
            TIM1->CR1 &= ~TIM_CR1_CEN;
            TIM1->BDTR &= ~TIM_BDTR_MOE;

            UART2_SendString("WARNING\r\n");
        }
        else {
            // Mức nguy hiểm -> Bật LED đỏ nhấp nháy
            LED_GREEN_PORT->BSRR = (1 << (LED_GREEN_PIN + 16));
            LED_YELLOW_PORT->BSRR = (1 << (LED_YELLOW_PIN + 16));
            // LED đỏ được điều khiển bởi Timer2 Interrupt

            // Tính tần số nhấp nháy cho LED đỏ (1Hz - 10Hz)
            // Ánh xạ tuyến tính từ [900, 2500] -> [1, 10]
            float frequency = 1.0f;
            if (gasValue > GAS_MAX_VALUE) {
                frequency = 10.0f;
            } else {
                frequency = 1.0f + ((float)(gasValue - GAS_THRESHOLD_RED) * 9.0f) / (float)(GAS_MAX_VALUE - GAS_THRESHOLD_RED);
            }
            // Tính nửa chu kỳ (ms) để đảo LED
            red_led_blink_period_ms = (uint32_t)(500.0f / frequency);

            // Kiểm tra để bật còi
            if (gasValue > GAS_THRESHOLD_BUZZER) {
                // Bật còi
                TIM1->BDTR |= TIM_BDTR_MOE; // Bật đầu ra PWM chính
                TIM1->CR1 |= TIM_CR1_CEN;  // Bật Timer1
                UART2_SendString("DANGER - BUZZER ON\r\n");
            } else {
                // Tắt còi
                TIM1->CR1 &= ~TIM_CR1_CEN;
                TIM1->BDTR &= ~TIM_BDTR_MOE;
                UART2_SendString("DANGER\r\n");
            }
        }

        DelayMs(200); // Chờ một chút trước lần đọc tiếp theo
    }
}

// ===================================================================
// --- CÁC HÀM KHỞI TẠO NGOẠI VI ---
// ===================================================================

void GPIO_Init_All(void) {
    // Bật clock cho GPIOA và GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;

    // Cấu hình LED (PA4, PA5, PA6) là output push-pull
    GPIOA->MODER &= ~((3U << (LED_GREEN_PIN*2)) | (3U << (LED_YELLOW_PIN*2)) | (3U << (LED_RED_PIN*2)));
    GPIOA->MODER |= (1U << (LED_GREEN_PIN*2)) | (1U << (LED_YELLOW_PIN*2)) | (1U << (LED_RED_PIN*2));
    GPIOA->OTYPER &= ~((1U << LED_GREEN_PIN) | (1U << LED_YELLOW_PIN) | (1U << LED_RED_PIN));

    // Cấu hình cảm biến Gas (PA0) là analog input
    MQ2_PORT->MODER |= (3U << (MQ2_PIN * 2));

    // Cấu hình còi (PA8) là Alternate Function cho Timer 1
    BUZZER_PORT->MODER &= ~(3U << (BUZZER_PIN * 2));
    BUZZER_PORT->MODER |= (2U << (BUZZER_PIN * 2)); // AF mode
    BUZZER_PORT->AFR[1] &= ~(0xFU << ((BUZZER_PIN - 8) * 4));
    BUZZER_PORT->AFR[1] |= (1U << ((BUZZER_PIN - 8) * 4)); // AF1 = TIM1_CH1

    // Cấu hình nút nhấn (PB0) là input với điện trở kéo lên
    BUTTON_PORT->MODER &= ~(3U << (BUTTON_PIN * 2)); // Input mode
    BUTTON_PORT->PUPDR &= ~(3U << (BUTTON_PIN * 2));
    BUTTON_PORT->PUPDR |= (1U << (BUTTON_PIN * 2)); // Pull-up
}

void ADC1_Init(void) {
    // Bật clock cho ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
    // Cấu hình ADC
    ADC1->SQR1 = 0; // 1 chuyển đổi
    ADC1->SQR3 = MQ2_PIN; // Chuyển đổi kênh 0 (PA0)
    ADC1->CR2 |= ADC_CR2_ADON; // Bật ADC
    DelayMs(1);
}

uint16_t ADC1_Read(void) {
    ADC1->CR2 |= ADC_CR2_SWSTART; // Bắt đầu chuyển đổi
    while (!(ADC1->SR & ADC_SR_EOC)); // Chờ chuyển đổi xong
    return (uint16_t)ADC1->DR;
}

void TIM2_Blink_Init(void) {
    // Timer 2 dùng để tạo tick 1ms cho hệ thống và nháy LED
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;

    // Giả sử PCLK1 = 42MHz, APB1 Prescaler = /2, PCLK1 Timer clock = 84MHz
    TIM2->PSC = 84 - 1;    // 84MHz / 84 = 1MHz
    TIM2->ARR = 1000 - 1;  // 1MHz / 1000 = 1kHz (Interrupt mỗi 1ms)

    TIM2->DIER |= TIM_DIER_UIE; // Bật interrupt update
    TIM2->CR1 |= TIM_CR1_CEN;   // Bật Timer 2

    NVIC_SetPriority(TIM2_IRQn, 2); // Đặt ưu tiên thấp hơn nút nhấn
    NVIC_EnableIRQ(TIM2_IRQn);
}

void TIM1_SinePWM_Init(void) {
    // Timer 1 + DMA để phát sóng sin cho còi
    RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
    RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;

    // Cấu hình Timer 1
    // Giả sử PCLK2 = 84MHz, APB2 Prescaler = /1, PCLK2 Timer clock = 84MHz
    TIM1->PSC = 0;
    TIM1->ARR = 255; // Độ phân giải PWM 8-bit, khớp với bảng sin

    // Cấu hình kênh 1 (PA8) ở chế độ PWM
    TIM1->CCMR1 |= TIM_CCMR1_OC1M_2 | TIM_CCMR1_OC1M_1; // PWM mode 1
    TIM1->CCMR1 |= TIM_CCMR1_OC1PE; // Preload enable
    TIM1->CCER |= TIM_CCER_CC1E; // Bật đầu ra kênh 1

    // Bật yêu cầu DMA khi có sự kiện update
    TIM1->DIER |= TIM_DIER_UDE;

    // Cấu hình DMA2, Stream 1, Channel 6 (cho TIM1_UP)
    DMA2_Stream1->CR &= ~DMA_SxCR_EN; // Tắt stream
    while(DMA2_Stream1->CR & DMA_SxCR_EN);

    DMA2->LIFCR = 0x3F << 6; // Xóa cờ ngắt của Stream 1

    DMA2_Stream1->PAR = (uint32_t)&(TIM1->CCR1); // Địa chỉ đích (thanh ghi PWM)
    DMA2_Stream1->M0AR = (uint32_t)sine_wave;   // Địa chỉ nguồn (bảng sin)
    DMA2_Stream1->NDTR = 32;                   // Số lượng dữ liệu

    DMA2_Stream1->CR = (6 << 25) |             // Channel 6
                       DMA_SxCR_PL_1 |           // Priority High
                       DMA_SxCR_MINC |           // Memory increment
                       DMA_SxCR_CIRC |           // Circular mode
                       DMA_SxCR_DIR_0;           // Memory-to-peripheral

    DMA2_Stream1->CR |= DMA_SxCR_EN; // Bật Stream
}

void EXTI0_Init(void) {
    // Bật clock cho SYSCFG
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;

    // Kết nối EXTI Line 0 với Port B
    SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI0;
    SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PB;

    // Cấu hình EXTI Line 0
    EXTI->IMR |= (1 << 0);    // Không mask line 0
    EXTI->RTSR &= ~(1 << 0);  // Tắt ngắt cạnh lên
    EXTI->FTSR |= (1 << 0);   // Bật ngắt cạnh xuống (khi nhấn nút)

    // Cấu hình NVIC
    NVIC_SetPriority(EXTI0_IRQn, 1); // Ưu tiên cao
    NVIC_EnableIRQ(EXTI0_IRQn);
}

void UART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
    GPIOA->MODER &= ~((3 << 4) | (3 << 6));
    GPIOA->MODER |= (2 << 4) | (2 << 6);
    GPIOA->AFR[0] &= ~((0xF << 8) | (0xF << 12));
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12);

    // Baudrate 115200 @ PCLK1 = 42MHz
    // 42,000,000 / (16 * 115200) = 22.786
    // Mantissa = 22, Fraction = 0.786 * 16 = 12.57 -> 13 (0xD)
    USART2->BRR = (22 << 4) | 13;
    USART2->CR1 = USART_CR1_TE | USART_CR1_UE;
}

void UART2_SendString(char *str) {
    while (*str) {
        while (!(USART2->SR & USART_SR_TXE));
        USART2->DR = *str++;
    }
}

void DelayMs(uint32_t ms) {
    // Delay blocking, chỉ dùng trong khởi tạo hoặc vòng lặp chính
    volatile uint32_t count = ms * 16800; // Ước tính cho 84MHz
    while (count--);
}

// ===================================================================
// --- CÁC TRÌNH PHỤC VỤ NGẮT (ISR) ---
// ===================================================================

void TIM2_IRQHandler(void) {
    if (TIM2->SR & TIM_SR_UIF) {
        TIM2->SR &= ~TIM_SR_UIF; // Xóa cờ ngắt

        // Tăng biến đếm tick hệ thống (dùng cho debounce)
        system_ticks_ms++;

        // Chỉ xử lý nháy LED nếu chương trình không bị tạm dừng
        if (!program_paused) {
             // Xử lý nháy LED đỏ
            if (gasValue >= GAS_THRESHOLD_RED) {
                red_led_blink_counter++;
                if (red_led_blink_counter >= red_led_blink_period_ms) {
                    LED_RED_PORT->ODR ^= (1 << LED_RED_PIN); // Đảo trạng thái LED đỏ
                    red_led_blink_counter = 0;
                }
            } else {
                // Nếu gas giảm xuống dưới ngưỡng, đảm bảo LED đỏ tắt
                 LED_RED_PORT->BSRR = (1 << (LED_RED_PIN + 16));
            }
        }
    }
}

void EXTI0_IRQHandler(void) {
    if (EXTI->PR & (1 << 0)) { // Kiểm tra cờ ngắt của line 0
        // Chống dội (debounce) bằng cách kiểm tra thời gian
        if ((system_ticks_ms - last_interrupt_time) > 200) { // 200ms debounce
            program_paused = !program_paused; // Đảo trạng thái tạm dừng

            if (program_paused) {
                // Tắt hết LED và còi khi tạm dừng
                LED_GREEN_PORT->BSRR = (1 << (LED_GREEN_PIN + 16));
                LED_YELLOW_PORT->BSRR = (1 << (LED_YELLOW_PIN + 16));
                LED_RED_PORT->BSRR = (1 << (LED_RED_PIN + 16));
                TIM1->CR1 &= ~TIM_CR1_CEN;
                TIM1->BDTR &= ~TIM_BDTR_MOE;
                UART2_SendString("\r\n--- PROGRAM PAUSED ---\r\n");
            } else {
                UART2_SendString("\r\n--- PROGRAM RESUMED ---\r\n");
            }

            last_interrupt_time = system_ticks_ms; // Cập nhật thời gian nhấn cuối
        }

        EXTI->PR = (1 << 0); // Xóa cờ ngắt bằng cách ghi 1 vào nó
    }
}
