
I2C_LCD_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022c4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080023d0  080023d0  000033d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002434  08002434  0000401c  2**0
                  CONTENTS
  4 .ARM          00000000  08002434  08002434  0000401c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002434  08002434  0000401c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002434  08002434  00003434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002438  08002438  00003438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800243c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000001c  08002458  0000401c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002458  00004094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c34  00000000  00000000  00004045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001509  00000000  00000000  0000ac79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000c188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a7  00000000  00000000  0000c908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001626b  00000000  00000000  0000ceaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000987d  00000000  00000000  0002311a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec38  00000000  00000000  0002c997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab5cf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d8c  00000000  00000000  000ab614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000ad3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080023b8 	.word	0x080023b8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080023b8 	.word	0x080023b8

0800014c <main>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000150:	f000 f9ee 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8000154:	f000 f898 	bl	8000288 <SystemClock_Config>
  MX_GPIO_Init();
 8000158:	f000 f90a 	bl	8000370 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f8da 	bl	8000314 <MX_I2C1_Init>

  I2C_LCD_Init(MyI2C_LCD);
 8000160:	2000      	movs	r0, #0
 8000162:	f001 fe5d 	bl	8001e20 <I2C_LCD_Init>
  I2C_LCD_CreateCustomChar(MyI2C_LCD, 0, HeartChar);
 8000166:	4a44      	ldr	r2, [pc, #272]	@ (8000278 <main+0x12c>)
 8000168:	2100      	movs	r1, #0
 800016a:	2000      	movs	r0, #0
 800016c:	f002 f8b6 	bl	80022dc <I2C_LCD_CreateCustomChar>
  I2C_LCD_CreateCustomChar(MyI2C_LCD, 1, SmileyFaceChar);
 8000170:	4a42      	ldr	r2, [pc, #264]	@ (800027c <main+0x130>)
 8000172:	2101      	movs	r1, #1
 8000174:	2000      	movs	r0, #0
 8000176:	f002 f8b1 	bl	80022dc <I2C_LCD_CreateCustomChar>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	2000      	movs	r0, #0
 8000180:	f001 ff3c 	bl	8001ffc <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "DeepBlueMbedded");
 8000184:	493e      	ldr	r1, [pc, #248]	@ (8000280 <main+0x134>)
 8000186:	2000      	movs	r0, #0
 8000188:	f001 ff7a 	bl	8002080 <I2C_LCD_WriteString>
  I2C_LCD_SetCursor(MyI2C_LCD, 0, 1);
 800018c:	2201      	movs	r2, #1
 800018e:	2100      	movs	r1, #0
 8000190:	2000      	movs	r0, #0
 8000192:	f001 ff33 	bl	8001ffc <I2C_LCD_SetCursor>
  I2C_LCD_WriteString(MyI2C_LCD, "I2C LCD ");
 8000196:	493b      	ldr	r1, [pc, #236]	@ (8000284 <main+0x138>)
 8000198:	2000      	movs	r0, #0
 800019a:	f001 ff71 	bl	8002080 <I2C_LCD_WriteString>
  I2C_LCD_PrintCustomChar(MyI2C_LCD, 1);
 800019e:	2101      	movs	r1, #1
 80001a0:	2000      	movs	r0, #0
 80001a2:	f002 f8ca 	bl	800233a <I2C_LCD_PrintCustomChar>
  I2C_LCD_PrintCustomChar(MyI2C_LCD, 0);
 80001a6:	2100      	movs	r1, #0
 80001a8:	2000      	movs	r0, #0
 80001aa:	f002 f8c6 	bl	800233a <I2C_LCD_PrintCustomChar>

  while (1)
  {
	I2C_LCD_NoBacklight(MyI2C_LCD);	HAL_Delay(1000);
 80001ae:	2000      	movs	r0, #0
 80001b0:	f001 ffb2 	bl	8002118 <I2C_LCD_NoBacklight>
 80001b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001b8:	f000 fa1c 	bl	80005f4 <HAL_Delay>
	I2C_LCD_Backlight(MyI2C_LCD);	HAL_Delay(1000);
 80001bc:	2000      	movs	r0, #0
 80001be:	f001 ff95 	bl	80020ec <I2C_LCD_Backlight>
 80001c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001c6:	f000 fa15 	bl	80005f4 <HAL_Delay>
	I2C_LCD_ShiftRight(MyI2C_LCD);	HAL_Delay(500);
 80001ca:	2000      	movs	r0, #0
 80001cc:	f001 ff7f 	bl	80020ce <I2C_LCD_ShiftRight>
 80001d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001d4:	f000 fa0e 	bl	80005f4 <HAL_Delay>
	I2C_LCD_ShiftRight(MyI2C_LCD);	HAL_Delay(500);
 80001d8:	2000      	movs	r0, #0
 80001da:	f001 ff78 	bl	80020ce <I2C_LCD_ShiftRight>
 80001de:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001e2:	f000 fa07 	bl	80005f4 <HAL_Delay>
	I2C_LCD_ShiftRight(MyI2C_LCD);	HAL_Delay(500);
 80001e6:	2000      	movs	r0, #0
 80001e8:	f001 ff71 	bl	80020ce <I2C_LCD_ShiftRight>
 80001ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001f0:	f000 fa00 	bl	80005f4 <HAL_Delay>
	I2C_LCD_ShiftLeft(MyI2C_LCD);	HAL_Delay(500);
 80001f4:	2000      	movs	r0, #0
 80001f6:	f001 ff5c 	bl	80020b2 <I2C_LCD_ShiftLeft>
 80001fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80001fe:	f000 f9f9 	bl	80005f4 <HAL_Delay>
	I2C_LCD_ShiftLeft(MyI2C_LCD);	HAL_Delay(500);
 8000202:	2000      	movs	r0, #0
 8000204:	f001 ff55 	bl	80020b2 <I2C_LCD_ShiftLeft>
 8000208:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800020c:	f000 f9f2 	bl	80005f4 <HAL_Delay>
	I2C_LCD_ShiftLeft(MyI2C_LCD);	HAL_Delay(500);
 8000210:	2000      	movs	r0, #0
 8000212:	f001 ff4e 	bl	80020b2 <I2C_LCD_ShiftLeft>
 8000216:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800021a:	f000 f9eb 	bl	80005f4 <HAL_Delay>
	I2C_LCD_Cursor(MyI2C_LCD);		HAL_Delay(1000);
 800021e:	2000      	movs	r0, #0
 8000220:	f001 ffd4 	bl	80021cc <I2C_LCD_Cursor>
 8000224:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000228:	f000 f9e4 	bl	80005f4 <HAL_Delay>
	I2C_LCD_Blink(MyI2C_LCD);		HAL_Delay(2000);
 800022c:	2000      	movs	r0, #0
 800022e:	f002 f811 	bl	8002254 <I2C_LCD_Blink>
 8000232:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000236:	f000 f9dd 	bl	80005f4 <HAL_Delay>
	I2C_LCD_NoBlink(MyI2C_LCD);		HAL_Delay(2000);
 800023a:	2000      	movs	r0, #0
 800023c:	f002 f82c 	bl	8002298 <I2C_LCD_NoBlink>
 8000240:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000244:	f000 f9d6 	bl	80005f4 <HAL_Delay>
	I2C_LCD_NoCursor(MyI2C_LCD);	HAL_Delay(1000);
 8000248:	2000      	movs	r0, #0
 800024a:	f001 ffe1 	bl	8002210 <I2C_LCD_NoCursor>
 800024e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000252:	f000 f9cf 	bl	80005f4 <HAL_Delay>
	I2C_LCD_NoDisplay(MyI2C_LCD);	HAL_Delay(1000);
 8000256:	2000      	movs	r0, #0
 8000258:	f001 ff96 	bl	8002188 <I2C_LCD_NoDisplay>
 800025c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000260:	f000 f9c8 	bl	80005f4 <HAL_Delay>
	I2C_LCD_Display(MyI2C_LCD);		HAL_Delay(1000);
 8000264:	2000      	movs	r0, #0
 8000266:	f001 ff6d 	bl	8002144 <I2C_LCD_Display>
 800026a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800026e:	f000 f9c1 	bl	80005f4 <HAL_Delay>
	I2C_LCD_NoBacklight(MyI2C_LCD);	HAL_Delay(1000);
 8000272:	bf00      	nop
 8000274:	e79b      	b.n	80001ae <main+0x62>
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	20000008 	.word	0x20000008
 8000280:	080023d0 	.word	0x080023d0
 8000284:	080023e0 	.word	0x080023e0

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b090      	sub	sp, #64	@ 0x40
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0318 	add.w	r3, r7, #24
 8000292:	2228      	movs	r2, #40	@ 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 f861 	bl	800235e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
 80002a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002aa:	2301      	movs	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002b4:	2300      	movs	r3, #0
 80002b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	2301      	movs	r3, #1
 80002ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002bc:	2302      	movs	r3, #2
 80002be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	4618      	mov	r0, r3
 80002d2:	f001 f8b7 	bl	8001444 <HAL_RCC_OscConfig>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002dc:	f000 f86a 	bl	80003b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e0:	230f      	movs	r3, #15
 80002e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e4:	2302      	movs	r3, #2
 80002e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2102      	movs	r1, #2
 80002fa:	4618      	mov	r0, r3
 80002fc:	f001 fb24 	bl	8001948 <HAL_RCC_ClockConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000306:	f000 f855 	bl	80003b4 <Error_Handler>
  }
}
 800030a:	bf00      	nop
 800030c:	3740      	adds	r7, #64	@ 0x40
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
	...

08000314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000318:	4b12      	ldr	r3, [pc, #72]	@ (8000364 <MX_I2C1_Init+0x50>)
 800031a:	4a13      	ldr	r2, [pc, #76]	@ (8000368 <MX_I2C1_Init+0x54>)
 800031c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800031e:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000320:	4a12      	ldr	r2, [pc, #72]	@ (800036c <MX_I2C1_Init+0x58>)
 8000322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000324:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <MX_I2C1_Init+0x50>)
 800032c:	2200      	movs	r2, #0
 800032e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000330:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000332:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000338:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <MX_I2C1_Init+0x50>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800033e:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000344:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034a:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <MX_I2C1_Init+0x50>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000350:	4804      	ldr	r0, [pc, #16]	@ (8000364 <MX_I2C1_Init+0x50>)
 8000352:	f000 fbdb 	bl	8000b0c <HAL_I2C_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 f82a 	bl	80003b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000360:	bf00      	nop
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000038 	.word	0x20000038
 8000368:	40005400 	.word	0x40005400
 800036c:	000186a0 	.word	0x000186a0

08000370 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000376:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a0d      	ldr	r2, [pc, #52]	@ (80003b0 <MX_GPIO_Init+0x40>)
 800037c:	f043 0320 	orr.w	r3, r3, #32
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b0b      	ldr	r3, [pc, #44]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0320 	and.w	r3, r3, #32
 800038a:	607b      	str	r3, [r7, #4]
 800038c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800038e:	4b08      	ldr	r3, [pc, #32]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	4a07      	ldr	r2, [pc, #28]	@ (80003b0 <MX_GPIO_Init+0x40>)
 8000394:	f043 0308 	orr.w	r3, r3, #8
 8000398:	6193      	str	r3, [r2, #24]
 800039a:	4b05      	ldr	r3, [pc, #20]	@ (80003b0 <MX_GPIO_Init+0x40>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	f003 0308 	and.w	r3, r3, #8
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003b8:	b672      	cpsid	i
}
 80003ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <Error_Handler+0x8>

080003c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <HAL_MspInit+0x40>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000400 <HAL_MspInit+0x40>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6193      	str	r3, [r2, #24]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <HAL_MspInit+0x40>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	f003 0301 	and.w	r3, r3, #1
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003de:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <HAL_MspInit+0x40>)
 80003e0:	69db      	ldr	r3, [r3, #28]
 80003e2:	4a07      	ldr	r2, [pc, #28]	@ (8000400 <HAL_MspInit+0x40>)
 80003e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003e8:	61d3      	str	r3, [r2, #28]
 80003ea:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <HAL_MspInit+0x40>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003f2:	603b      	str	r3, [r7, #0]
 80003f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003f6:	bf00      	nop
 80003f8:	370c      	adds	r7, #12
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000

08000404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b088      	sub	sp, #32
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040c:	f107 0310 	add.w	r3, r7, #16
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a15      	ldr	r2, [pc, #84]	@ (8000474 <HAL_I2C_MspInit+0x70>)
 8000420:	4293      	cmp	r3, r2
 8000422:	d123      	bne.n	800046c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a13      	ldr	r2, [pc, #76]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 800042a:	f043 0308 	orr.w	r3, r3, #8
 800042e:	6193      	str	r3, [r2, #24]
 8000430:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	f003 0308 	and.w	r3, r3, #8
 8000438:	60fb      	str	r3, [r7, #12]
 800043a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800043c:	23c0      	movs	r3, #192	@ 0xc0
 800043e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000440:	2312      	movs	r3, #18
 8000442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000444:	2303      	movs	r3, #3
 8000446:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000448:	f107 0310 	add.w	r3, r7, #16
 800044c:	4619      	mov	r1, r3
 800044e:	480b      	ldr	r0, [pc, #44]	@ (800047c <HAL_I2C_MspInit+0x78>)
 8000450:	f000 f9d8 	bl	8000804 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000454:	4b08      	ldr	r3, [pc, #32]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	4a07      	ldr	r2, [pc, #28]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 800045a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800045e:	61d3      	str	r3, [r2, #28]
 8000460:	4b05      	ldr	r3, [pc, #20]	@ (8000478 <HAL_I2C_MspInit+0x74>)
 8000462:	69db      	ldr	r3, [r3, #28]
 8000464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000468:	60bb      	str	r3, [r7, #8]
 800046a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800046c:	bf00      	nop
 800046e:	3720      	adds	r7, #32
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40005400 	.word	0x40005400
 8000478:	40021000 	.word	0x40021000
 800047c:	40010c00 	.word	0x40010c00

08000480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000484:	bf00      	nop
 8000486:	e7fd      	b.n	8000484 <NMI_Handler+0x4>

08000488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	bf00      	nop
 8000496:	e7fd      	b.n	8000494 <MemManage_Handler+0x4>

08000498 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bc80      	pop	{r7}
 80004be:	4770      	bx	lr

080004c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d0:	f000 f874 	bl	80005bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80004e4:	f7ff fff8 	bl	80004d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480b      	ldr	r0, [pc, #44]	@ (8000518 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80004ea:	490c      	ldr	r1, [pc, #48]	@ (800051c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80004ec:	4a0c      	ldr	r2, [pc, #48]	@ (8000520 <LoopFillZerobss+0x16>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a09      	ldr	r2, [pc, #36]	@ (8000524 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000500:	4c09      	ldr	r4, [pc, #36]	@ (8000528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800050e:	f001 ff2f 	bl	8002370 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fe1b 	bl	800014c <main>
  bx lr
 8000516:	4770      	bx	lr
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000520:	0800243c 	.word	0x0800243c
  ldr r2, =_sbss
 8000524:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000528:	20000094 	.word	0x20000094

0800052c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800052c:	e7fe      	b.n	800052c <ADC1_2_IRQHandler>
	...

08000530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <HAL_Init+0x28>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a07      	ldr	r2, [pc, #28]	@ (8000558 <HAL_Init+0x28>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000540:	2003      	movs	r0, #3
 8000542:	f000 f92b 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000546:	200f      	movs	r0, #15
 8000548:	f000 f808 	bl	800055c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800054c:	f7ff ff38 	bl	80003c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40022000 	.word	0x40022000

0800055c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000564:	4b12      	ldr	r3, [pc, #72]	@ (80005b0 <HAL_InitTick+0x54>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <HAL_InitTick+0x58>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000572:	fbb3 f3f1 	udiv	r3, r3, r1
 8000576:	fbb2 f3f3 	udiv	r3, r2, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f000 f935 	bl	80007ea <HAL_SYSTICK_Config>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	e00e      	b.n	80005a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2b0f      	cmp	r3, #15
 800058e:	d80a      	bhi.n	80005a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000590:	2200      	movs	r2, #0
 8000592:	6879      	ldr	r1, [r7, #4]
 8000594:	f04f 30ff 	mov.w	r0, #4294967295
 8000598:	f000 f90b 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059c:	4a06      	ldr	r2, [pc, #24]	@ (80005b8 <HAL_InitTick+0x5c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a6:	2301      	movs	r3, #1
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000010 	.word	0x20000010
 80005b4:	20000018 	.word	0x20000018
 80005b8:	20000014 	.word	0x20000014

080005bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005c0:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_IncTick+0x1c>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	461a      	mov	r2, r3
 80005c6:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <HAL_IncTick+0x20>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4413      	add	r3, r2
 80005cc:	4a03      	ldr	r2, [pc, #12]	@ (80005dc <HAL_IncTick+0x20>)
 80005ce:	6013      	str	r3, [r2, #0]
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bc80      	pop	{r7}
 80005d6:	4770      	bx	lr
 80005d8:	20000018 	.word	0x20000018
 80005dc:	2000008c 	.word	0x2000008c

080005e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	@ (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	2000008c 	.word	0x2000008c

080005f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff0 	bl	80005e0 <HAL_GetTick>
 8000600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800060c:	d005      	beq.n	800061a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <HAL_Delay+0x44>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
 8000618:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800061a:	bf00      	nop
 800061c:	f7ff ffe0 	bl	80005e0 <HAL_GetTick>
 8000620:	4602      	mov	r2, r0
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	429a      	cmp	r2, r3
 800062a:	d8f7      	bhi.n	800061c <HAL_Delay+0x28>
  {
  }
}
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000018 	.word	0x20000018

0800063c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	@ (8000680 <__NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	@ (800069c <__NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	bc80      	pop	{r7}
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db0a      	blt.n	80006ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	b2da      	uxtb	r2, r3
 80006b8:	490c      	ldr	r1, [pc, #48]	@ (80006ec <__NVIC_SetPriority+0x4c>)
 80006ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	440b      	add	r3, r1
 80006c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006c8:	e00a      	b.n	80006e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	@ (80006f0 <__NVIC_SetPriority+0x50>)
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	3b04      	subs	r3, #4
 80006d8:	0112      	lsls	r2, r2, #4
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	440b      	add	r3, r1
 80006de:	761a      	strb	r2, [r3, #24]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e100 	.word	0xe000e100
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	@ 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	f04f 32ff 	mov.w	r2, #4294967295
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	fa02 f303 	lsl.w	r3, r2, r3
 8000732:	43da      	mvns	r2, r3
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	401a      	ands	r2, r3
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073c:	f04f 31ff 	mov.w	r1, #4294967295
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	fa01 f303 	lsl.w	r3, r1, r3
 8000746:	43d9      	mvns	r1, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	4313      	orrs	r3, r2
         );
}
 800074e:	4618      	mov	r0, r3
 8000750:	3724      	adds	r7, #36	@ 0x24
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	@ (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	@ (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff49 	bl	800063c <__NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff5e 	bl	8000684 <__NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <__NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb0 	bl	8000758 <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000804:	b480      	push	{r7}
 8000806:	b08b      	sub	sp, #44	@ 0x2c
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000816:	e169      	b.n	8000aec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000818:	2201      	movs	r2, #1
 800081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800081c:	fa02 f303 	lsl.w	r3, r2, r3
 8000820:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	4013      	ands	r3, r2
 800082a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800082c:	69ba      	ldr	r2, [r7, #24]
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	429a      	cmp	r2, r3
 8000832:	f040 8158 	bne.w	8000ae6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4a9a      	ldr	r2, [pc, #616]	@ (8000aa4 <HAL_GPIO_Init+0x2a0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d05e      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000840:	4a98      	ldr	r2, [pc, #608]	@ (8000aa4 <HAL_GPIO_Init+0x2a0>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d875      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000846:	4a98      	ldr	r2, [pc, #608]	@ (8000aa8 <HAL_GPIO_Init+0x2a4>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d058      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 800084c:	4a96      	ldr	r2, [pc, #600]	@ (8000aa8 <HAL_GPIO_Init+0x2a4>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d86f      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000852:	4a96      	ldr	r2, [pc, #600]	@ (8000aac <HAL_GPIO_Init+0x2a8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d052      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000858:	4a94      	ldr	r2, [pc, #592]	@ (8000aac <HAL_GPIO_Init+0x2a8>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d869      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800085e:	4a94      	ldr	r2, [pc, #592]	@ (8000ab0 <HAL_GPIO_Init+0x2ac>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d04c      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000864:	4a92      	ldr	r2, [pc, #584]	@ (8000ab0 <HAL_GPIO_Init+0x2ac>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d863      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800086a:	4a92      	ldr	r2, [pc, #584]	@ (8000ab4 <HAL_GPIO_Init+0x2b0>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d046      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
 8000870:	4a90      	ldr	r2, [pc, #576]	@ (8000ab4 <HAL_GPIO_Init+0x2b0>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d85d      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 8000876:	2b12      	cmp	r3, #18
 8000878:	d82a      	bhi.n	80008d0 <HAL_GPIO_Init+0xcc>
 800087a:	2b12      	cmp	r3, #18
 800087c:	d859      	bhi.n	8000932 <HAL_GPIO_Init+0x12e>
 800087e:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <HAL_GPIO_Init+0x80>)
 8000880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000884:	080008ff 	.word	0x080008ff
 8000888:	080008d9 	.word	0x080008d9
 800088c:	080008eb 	.word	0x080008eb
 8000890:	0800092d 	.word	0x0800092d
 8000894:	08000933 	.word	0x08000933
 8000898:	08000933 	.word	0x08000933
 800089c:	08000933 	.word	0x08000933
 80008a0:	08000933 	.word	0x08000933
 80008a4:	08000933 	.word	0x08000933
 80008a8:	08000933 	.word	0x08000933
 80008ac:	08000933 	.word	0x08000933
 80008b0:	08000933 	.word	0x08000933
 80008b4:	08000933 	.word	0x08000933
 80008b8:	08000933 	.word	0x08000933
 80008bc:	08000933 	.word	0x08000933
 80008c0:	08000933 	.word	0x08000933
 80008c4:	08000933 	.word	0x08000933
 80008c8:	080008e1 	.word	0x080008e1
 80008cc:	080008f5 	.word	0x080008f5
 80008d0:	4a79      	ldr	r2, [pc, #484]	@ (8000ab8 <HAL_GPIO_Init+0x2b4>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d013      	beq.n	80008fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008d6:	e02c      	b.n	8000932 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	623b      	str	r3, [r7, #32]
          break;
 80008de:	e029      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	3304      	adds	r3, #4
 80008e6:	623b      	str	r3, [r7, #32]
          break;
 80008e8:	e024      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	68db      	ldr	r3, [r3, #12]
 80008ee:	3308      	adds	r3, #8
 80008f0:	623b      	str	r3, [r7, #32]
          break;
 80008f2:	e01f      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	68db      	ldr	r3, [r3, #12]
 80008f8:	330c      	adds	r3, #12
 80008fa:	623b      	str	r3, [r7, #32]
          break;
 80008fc:	e01a      	b.n	8000934 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d102      	bne.n	800090c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000906:	2304      	movs	r3, #4
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e013      	b.n	8000934 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d105      	bne.n	8000920 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	611a      	str	r2, [r3, #16]
          break;
 800091e:	e009      	b.n	8000934 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000920:	2308      	movs	r3, #8
 8000922:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	69fa      	ldr	r2, [r7, #28]
 8000928:	615a      	str	r2, [r3, #20]
          break;
 800092a:	e003      	b.n	8000934 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e000      	b.n	8000934 <HAL_GPIO_Init+0x130>
          break;
 8000932:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2bff      	cmp	r3, #255	@ 0xff
 8000938:	d801      	bhi.n	800093e <HAL_GPIO_Init+0x13a>
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	e001      	b.n	8000942 <HAL_GPIO_Init+0x13e>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3304      	adds	r3, #4
 8000942:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2bff      	cmp	r3, #255	@ 0xff
 8000948:	d802      	bhi.n	8000950 <HAL_GPIO_Init+0x14c>
 800094a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	e002      	b.n	8000956 <HAL_GPIO_Init+0x152>
 8000950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000952:	3b08      	subs	r3, #8
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	210f      	movs	r1, #15
 800095e:	693b      	ldr	r3, [r7, #16]
 8000960:	fa01 f303 	lsl.w	r3, r1, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	401a      	ands	r2, r3
 8000968:	6a39      	ldr	r1, [r7, #32]
 800096a:	693b      	ldr	r3, [r7, #16]
 800096c:	fa01 f303 	lsl.w	r3, r1, r3
 8000970:	431a      	orrs	r2, r3
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 80b1 	beq.w	8000ae6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000984:	4b4d      	ldr	r3, [pc, #308]	@ (8000abc <HAL_GPIO_Init+0x2b8>)
 8000986:	699b      	ldr	r3, [r3, #24]
 8000988:	4a4c      	ldr	r2, [pc, #304]	@ (8000abc <HAL_GPIO_Init+0x2b8>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6193      	str	r3, [r2, #24]
 8000990:	4b4a      	ldr	r3, [pc, #296]	@ (8000abc <HAL_GPIO_Init+0x2b8>)
 8000992:	699b      	ldr	r3, [r3, #24]
 8000994:	f003 0301 	and.w	r3, r3, #1
 8000998:	60bb      	str	r3, [r7, #8]
 800099a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800099c:	4a48      	ldr	r2, [pc, #288]	@ (8000ac0 <HAL_GPIO_Init+0x2bc>)
 800099e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009a0:	089b      	lsrs	r3, r3, #2
 80009a2:	3302      	adds	r3, #2
 80009a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	220f      	movs	r2, #15
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4013      	ands	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a40      	ldr	r2, [pc, #256]	@ (8000ac4 <HAL_GPIO_Init+0x2c0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d013      	beq.n	80009f0 <HAL_GPIO_Init+0x1ec>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a3f      	ldr	r2, [pc, #252]	@ (8000ac8 <HAL_GPIO_Init+0x2c4>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d00d      	beq.n	80009ec <HAL_GPIO_Init+0x1e8>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a3e      	ldr	r2, [pc, #248]	@ (8000acc <HAL_GPIO_Init+0x2c8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d007      	beq.n	80009e8 <HAL_GPIO_Init+0x1e4>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a3d      	ldr	r2, [pc, #244]	@ (8000ad0 <HAL_GPIO_Init+0x2cc>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d101      	bne.n	80009e4 <HAL_GPIO_Init+0x1e0>
 80009e0:	2303      	movs	r3, #3
 80009e2:	e006      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009e4:	2304      	movs	r3, #4
 80009e6:	e004      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009e8:	2302      	movs	r3, #2
 80009ea:	e002      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <HAL_GPIO_Init+0x1ee>
 80009f0:	2300      	movs	r3, #0
 80009f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80009f4:	f002 0203 	and.w	r2, r2, #3
 80009f8:	0092      	lsls	r2, r2, #2
 80009fa:	4093      	lsls	r3, r2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a02:	492f      	ldr	r1, [pc, #188]	@ (8000ac0 <HAL_GPIO_Init+0x2bc>)
 8000a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a06:	089b      	lsrs	r3, r3, #2
 8000a08:	3302      	adds	r3, #2
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d006      	beq.n	8000a2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a1e:	689a      	ldr	r2, [r3, #8]
 8000a20:	492c      	ldr	r1, [pc, #176]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	4313      	orrs	r3, r2
 8000a26:	608b      	str	r3, [r1, #8]
 8000a28:	e006      	b.n	8000a38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	69bb      	ldr	r3, [r7, #24]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	4928      	ldr	r1, [pc, #160]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a34:	4013      	ands	r3, r2
 8000a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d006      	beq.n	8000a52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a46:	68da      	ldr	r2, [r3, #12]
 8000a48:	4922      	ldr	r1, [pc, #136]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a4a:	69bb      	ldr	r3, [r7, #24]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	60cb      	str	r3, [r1, #12]
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a52:	4b20      	ldr	r3, [pc, #128]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a54:	68da      	ldr	r2, [r3, #12]
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	43db      	mvns	r3, r3
 8000a5a:	491e      	ldr	r1, [pc, #120]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d006      	beq.n	8000a7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a6c:	4b19      	ldr	r3, [pc, #100]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a6e:	685a      	ldr	r2, [r3, #4]
 8000a70:	4918      	ldr	r1, [pc, #96]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a72:	69bb      	ldr	r3, [r7, #24]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
 8000a78:	e006      	b.n	8000a88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	43db      	mvns	r3, r3
 8000a82:	4914      	ldr	r1, [pc, #80]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a84:	4013      	ands	r3, r2
 8000a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d021      	beq.n	8000ad8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	490e      	ldr	r1, [pc, #56]	@ (8000ad4 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	69bb      	ldr	r3, [r7, #24]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	600b      	str	r3, [r1, #0]
 8000aa0:	e021      	b.n	8000ae6 <HAL_GPIO_Init+0x2e2>
 8000aa2:	bf00      	nop
 8000aa4:	10320000 	.word	0x10320000
 8000aa8:	10310000 	.word	0x10310000
 8000aac:	10220000 	.word	0x10220000
 8000ab0:	10210000 	.word	0x10210000
 8000ab4:	10120000 	.word	0x10120000
 8000ab8:	10110000 	.word	0x10110000
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00
 8000acc:	40011000 	.word	0x40011000
 8000ad0:	40011400 	.word	0x40011400
 8000ad4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	43db      	mvns	r3, r3
 8000ae0:	4909      	ldr	r1, [pc, #36]	@ (8000b08 <HAL_GPIO_Init+0x304>)
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae8:	3301      	adds	r3, #1
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af2:	fa22 f303 	lsr.w	r3, r2, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f47f ae8e 	bne.w	8000818 <HAL_GPIO_Init+0x14>
  }
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	372c      	adds	r7, #44	@ 0x2c
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d101      	bne.n	8000b1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e12b      	b.n	8000d76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d106      	bne.n	8000b38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fc66 	bl	8000404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2224      	movs	r2, #36	@ 0x24
 8000b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0201 	bic.w	r2, r2, #1
 8000b4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000b5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000b6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000b70:	f001 f832 	bl	8001bd8 <HAL_RCC_GetPCLK1Freq>
 8000b74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	4a81      	ldr	r2, [pc, #516]	@ (8000d80 <HAL_I2C_Init+0x274>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d807      	bhi.n	8000b90 <HAL_I2C_Init+0x84>
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a80      	ldr	r2, [pc, #512]	@ (8000d84 <HAL_I2C_Init+0x278>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	bf94      	ite	ls
 8000b88:	2301      	movls	r3, #1
 8000b8a:	2300      	movhi	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	e006      	b.n	8000b9e <HAL_I2C_Init+0x92>
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4a7d      	ldr	r2, [pc, #500]	@ (8000d88 <HAL_I2C_Init+0x27c>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	bf94      	ite	ls
 8000b98:	2301      	movls	r3, #1
 8000b9a:	2300      	movhi	r3, #0
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e0e7      	b.n	8000d76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4a78      	ldr	r2, [pc, #480]	@ (8000d8c <HAL_I2C_Init+0x280>)
 8000baa:	fba2 2303 	umull	r2, r3, r2, r3
 8000bae:	0c9b      	lsrs	r3, r3, #18
 8000bb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	430a      	orrs	r2, r1
 8000bc4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	4a6a      	ldr	r2, [pc, #424]	@ (8000d80 <HAL_I2C_Init+0x274>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d802      	bhi.n	8000be0 <HAL_I2C_Init+0xd4>
 8000bda:	68bb      	ldr	r3, [r7, #8]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	e009      	b.n	8000bf4 <HAL_I2C_Init+0xe8>
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000be6:	fb02 f303 	mul.w	r3, r2, r3
 8000bea:	4a69      	ldr	r2, [pc, #420]	@ (8000d90 <HAL_I2C_Init+0x284>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	099b      	lsrs	r3, r3, #6
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	6812      	ldr	r2, [r2, #0]
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000c06:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	495c      	ldr	r1, [pc, #368]	@ (8000d80 <HAL_I2C_Init+0x274>)
 8000c10:	428b      	cmp	r3, r1
 8000c12:	d819      	bhi.n	8000c48 <HAL_I2C_Init+0x13c>
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	1e59      	subs	r1, r3, #1
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c22:	1c59      	adds	r1, r3, #1
 8000c24:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000c28:	400b      	ands	r3, r1
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d00a      	beq.n	8000c44 <HAL_I2C_Init+0x138>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	1e59      	subs	r1, r3, #1
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c42:	e051      	b.n	8000ce8 <HAL_I2C_Init+0x1dc>
 8000c44:	2304      	movs	r3, #4
 8000c46:	e04f      	b.n	8000ce8 <HAL_I2C_Init+0x1dc>
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d111      	bne.n	8000c74 <HAL_I2C_Init+0x168>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	1e58      	subs	r0, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6859      	ldr	r1, [r3, #4]
 8000c58:	460b      	mov	r3, r1
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	440b      	add	r3, r1
 8000c5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c62:	3301      	adds	r3, #1
 8000c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	e012      	b.n	8000c9a <HAL_I2C_Init+0x18e>
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	1e58      	subs	r0, r3, #1
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6859      	ldr	r1, [r3, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	0099      	lsls	r1, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	bf0c      	ite	eq
 8000c94:	2301      	moveq	r3, #1
 8000c96:	2300      	movne	r3, #0
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_I2C_Init+0x196>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e022      	b.n	8000ce8 <HAL_I2C_Init+0x1dc>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10e      	bne.n	8000cc8 <HAL_I2C_Init+0x1bc>
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	1e58      	subs	r0, r3, #1
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6859      	ldr	r1, [r3, #4]
 8000cb2:	460b      	mov	r3, r1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	440b      	add	r3, r1
 8000cb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cc6:	e00f      	b.n	8000ce8 <HAL_I2C_Init+0x1dc>
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	1e58      	subs	r0, r3, #1
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6859      	ldr	r1, [r3, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	440b      	add	r3, r1
 8000cd6:	0099      	lsls	r1, r3, #2
 8000cd8:	440b      	add	r3, r1
 8000cda:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cde:	3301      	adds	r3, #1
 8000ce0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ce8:	6879      	ldr	r1, [r7, #4]
 8000cea:	6809      	ldr	r1, [r1, #0]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69da      	ldr	r2, [r3, #28]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6a1b      	ldr	r3, [r3, #32]
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000d16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	6911      	ldr	r1, [r2, #16]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	68d2      	ldr	r2, [r2, #12]
 8000d22:	4311      	orrs	r1, r2
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695a      	ldr	r2, [r3, #20]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 0201 	orr.w	r2, r2, #1
 8000d56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2220      	movs	r2, #32
 8000d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000d74:	2300      	movs	r3, #0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	000186a0 	.word	0x000186a0
 8000d84:	001e847f 	.word	0x001e847f
 8000d88:	003d08ff 	.word	0x003d08ff
 8000d8c:	431bde83 	.word	0x431bde83
 8000d90:	10624dd3 	.word	0x10624dd3

08000d94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af02      	add	r7, sp, #8
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	460b      	mov	r3, r1
 8000da2:	817b      	strh	r3, [r7, #10]
 8000da4:	4613      	mov	r3, r2
 8000da6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8000da8:	f7ff fc1a 	bl	80005e0 <HAL_GetTick>
 8000dac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b20      	cmp	r3, #32
 8000db8:	f040 80e0 	bne.w	8000f7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	9300      	str	r3, [sp, #0]
 8000dc0:	2319      	movs	r3, #25
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4970      	ldr	r1, [pc, #448]	@ (8000f88 <HAL_I2C_Master_Transmit+0x1f4>)
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f000 f964 	bl	8001094 <I2C_WaitOnFlagUntilTimeout>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	e0d3      	b.n	8000f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d101      	bne.n	8000de4 <HAL_I2C_Master_Transmit+0x50>
 8000de0:	2302      	movs	r3, #2
 8000de2:	e0cc      	b.n	8000f7e <HAL_I2C_Master_Transmit+0x1ea>
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2201      	movs	r2, #1
 8000de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d007      	beq.n	8000e0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f042 0201 	orr.w	r2, r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2221      	movs	r2, #33	@ 0x21
 8000e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	2210      	movs	r2, #16
 8000e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	893a      	ldrh	r2, [r7, #8]
 8000e3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	4a50      	ldr	r2, [pc, #320]	@ (8000f8c <HAL_I2C_Master_Transmit+0x1f8>)
 8000e4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8000e4c:	8979      	ldrh	r1, [r7, #10]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	6a3a      	ldr	r2, [r7, #32]
 8000e52:	68f8      	ldr	r0, [r7, #12]
 8000e54:	f000 f89c 	bl	8000f90 <I2C_MasterRequestWrite>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e08d      	b.n	8000f7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8000e78:	e066      	b.n	8000f48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	6a39      	ldr	r1, [r7, #32]
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f000 fa22 	bl	80012c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00d      	beq.n	8000ea6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	d107      	bne.n	8000ea2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ea0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e06b      	b.n	8000f7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	b29a      	uxth	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d11b      	bne.n	8000f1c <HAL_I2C_Master_Transmit+0x188>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d017      	beq.n	8000f1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efc:	1c5a      	adds	r2, r3, #1
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f14:	3b01      	subs	r3, #1
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	6a39      	ldr	r1, [r7, #32]
 8000f20:	68f8      	ldr	r0, [r7, #12]
 8000f22:	f000 fa19 	bl	8001358 <I2C_WaitOnBTFFlagUntilTimeout>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d00d      	beq.n	8000f48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	2b04      	cmp	r3, #4
 8000f32:	d107      	bne.n	8000f44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8000f44:	2301      	movs	r3, #1
 8000f46:	e01a      	b.n	8000f7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d194      	bne.n	8000e7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2220      	movs	r2, #32
 8000f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e000      	b.n	8000f7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8000f7c:	2302      	movs	r3, #2
  }
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	00100002 	.word	0x00100002
 8000f8c:	ffff0000 	.word	0xffff0000

08000f90 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af02      	add	r7, sp, #8
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	2b08      	cmp	r3, #8
 8000faa:	d006      	beq.n	8000fba <I2C_MasterRequestWrite+0x2a>
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d003      	beq.n	8000fba <I2C_MasterRequestWrite+0x2a>
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8000fb8:	d108      	bne.n	8000fcc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	e00b      	b.n	8000fe4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd0:	2b12      	cmp	r3, #18
 8000fd2:	d107      	bne.n	8000fe4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fe2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8000ff0:	68f8      	ldr	r0, [r7, #12]
 8000ff2:	f000 f84f 	bl	8001094 <I2C_WaitOnFlagUntilTimeout>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00d      	beq.n	8001018 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001006:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800100a:	d103      	bne.n	8001014 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001012:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e035      	b.n	8001084 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	691b      	ldr	r3, [r3, #16]
 800101c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001020:	d108      	bne.n	8001034 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001022:	897b      	ldrh	r3, [r7, #10]
 8001024:	b2db      	uxtb	r3, r3
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	e01b      	b.n	800106c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001034:	897b      	ldrh	r3, [r7, #10]
 8001036:	11db      	asrs	r3, r3, #7
 8001038:	b2db      	uxtb	r3, r3
 800103a:	f003 0306 	and.w	r3, r3, #6
 800103e:	b2db      	uxtb	r3, r3
 8001040:	f063 030f 	orn	r3, r3, #15
 8001044:	b2da      	uxtb	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	490e      	ldr	r1, [pc, #56]	@ (800108c <I2C_MasterRequestWrite+0xfc>)
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f000 f898 	bl	8001188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e010      	b.n	8001084 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001062:	897b      	ldrh	r3, [r7, #10]
 8001064:	b2da      	uxtb	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	4907      	ldr	r1, [pc, #28]	@ (8001090 <I2C_MasterRequestWrite+0x100>)
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f000 f888 	bl	8001188 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3718      	adds	r7, #24
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	00010008 	.word	0x00010008
 8001090:	00010002 	.word	0x00010002

08001094 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	4613      	mov	r3, r2
 80010a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010a4:	e048      	b.n	8001138 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ac:	d044      	beq.n	8001138 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80010ae:	f7ff fa97 	bl	80005e0 <HAL_GetTick>
 80010b2:	4602      	mov	r2, r0
 80010b4:	69bb      	ldr	r3, [r7, #24]
 80010b6:	1ad3      	subs	r3, r2, r3
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d302      	bcc.n	80010c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d139      	bne.n	8001138 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	0c1b      	lsrs	r3, r3, #16
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d10d      	bne.n	80010ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	695b      	ldr	r3, [r3, #20]
 80010d4:	43da      	mvns	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	4013      	ands	r3, r2
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	bf0c      	ite	eq
 80010e0:	2301      	moveq	r3, #1
 80010e2:	2300      	movne	r3, #0
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	e00c      	b.n	8001104 <I2C_WaitOnFlagUntilTimeout+0x70>
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	43da      	mvns	r2, r3
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	4013      	ands	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	429a      	cmp	r2, r3
 8001108:	d116      	bne.n	8001138 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2200      	movs	r2, #0
 800110e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2220      	movs	r2, #32
 8001114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f043 0220 	orr.w	r2, r3, #32
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001134:	2301      	movs	r3, #1
 8001136:	e023      	b.n	8001180 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	0c1b      	lsrs	r3, r3, #16
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b01      	cmp	r3, #1
 8001140:	d10d      	bne.n	800115e <I2C_WaitOnFlagUntilTimeout+0xca>
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	43da      	mvns	r2, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4013      	ands	r3, r2
 800114e:	b29b      	uxth	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	461a      	mov	r2, r3
 800115c:	e00c      	b.n	8001178 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	43da      	mvns	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	4013      	ands	r3, r2
 800116a:	b29b      	uxth	r3, r3
 800116c:	2b00      	cmp	r3, #0
 800116e:	bf0c      	ite	eq
 8001170:	2301      	moveq	r3, #1
 8001172:	2300      	movne	r3, #0
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	429a      	cmp	r2, r3
 800117c:	d093      	beq.n	80010a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
}
 8001180:	4618      	mov	r0, r3
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001196:	e071      	b.n	800127c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a6:	d123      	bne.n	80011f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80011b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80011c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2220      	movs	r2, #32
 80011cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f043 0204 	orr.w	r2, r3, #4
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e067      	b.n	80012c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f6:	d041      	beq.n	800127c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011f8:	f7ff f9f2 	bl	80005e0 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	687a      	ldr	r2, [r7, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	d302      	bcc.n	800120e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d136      	bne.n	800127c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	0c1b      	lsrs	r3, r3, #16
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d10c      	bne.n	8001232 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4013      	ands	r3, r2
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	bf14      	ite	ne
 800122a:	2301      	movne	r3, #1
 800122c:	2300      	moveq	r3, #0
 800122e:	b2db      	uxtb	r3, r3
 8001230:	e00b      	b.n	800124a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	43da      	mvns	r2, r3
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	4013      	ands	r3, r2
 800123e:	b29b      	uxth	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	bf14      	ite	ne
 8001244:	2301      	movne	r3, #1
 8001246:	2300      	moveq	r3, #0
 8001248:	b2db      	uxtb	r3, r3
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2220      	movs	r2, #32
 8001258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f043 0220 	orr.w	r2, r3, #32
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2200      	movs	r2, #0
 8001274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e021      	b.n	80012c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	0c1b      	lsrs	r3, r3, #16
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b01      	cmp	r3, #1
 8001284:	d10c      	bne.n	80012a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	43da      	mvns	r2, r3
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4013      	ands	r3, r2
 8001292:	b29b      	uxth	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	bf14      	ite	ne
 8001298:	2301      	movne	r3, #1
 800129a:	2300      	moveq	r3, #0
 800129c:	b2db      	uxtb	r3, r3
 800129e:	e00b      	b.n	80012b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	43da      	mvns	r2, r3
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	4013      	ands	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	bf14      	ite	ne
 80012b2:	2301      	movne	r3, #1
 80012b4:	2300      	moveq	r3, #0
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f af6d 	bne.w	8001198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80012d4:	e034      	b.n	8001340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80012d6:	68f8      	ldr	r0, [r7, #12]
 80012d8:	f000 f886 	bl	80013e8 <I2C_IsAcknowledgeFailed>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e034      	b.n	8001350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ec:	d028      	beq.n	8001340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ee:	f7ff f977 	bl	80005e0 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d302      	bcc.n	8001304 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11d      	bne.n	8001340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130e:	2b80      	cmp	r3, #128	@ 0x80
 8001310:	d016      	beq.n	8001340 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	2200      	movs	r2, #0
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2220      	movs	r2, #32
 800131c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f043 0220 	orr.w	r2, r3, #32
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e007      	b.n	8001350 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134a:	2b80      	cmp	r3, #128	@ 0x80
 800134c:	d1c3      	bne.n	80012d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001364:	e034      	b.n	80013d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f83e 	bl	80013e8 <I2C_IsAcknowledgeFailed>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e034      	b.n	80013e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800137c:	d028      	beq.n	80013d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800137e:	f7ff f92f 	bl	80005e0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	429a      	cmp	r2, r3
 800138c:	d302      	bcc.n	8001394 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d11d      	bne.n	80013d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0304 	and.w	r3, r3, #4
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d016      	beq.n	80013d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2200      	movs	r2, #0
 80013a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2220      	movs	r2, #32
 80013ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013bc:	f043 0220 	orr.w	r2, r3, #32
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e007      	b.n	80013e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	f003 0304 	and.w	r3, r3, #4
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d1c3      	bne.n	8001366 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013fe:	d11b      	bne.n	8001438 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001408:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2220      	movs	r2, #32
 8001414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f043 0204 	orr.w	r2, r3, #4
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e000      	b.n	800143a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e272      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8087 	beq.w	8001572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001464:	4b92      	ldr	r3, [pc, #584]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b04      	cmp	r3, #4
 800146e:	d00c      	beq.n	800148a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001470:	4b8f      	ldr	r3, [pc, #572]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d112      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
 800147c:	4b8c      	ldr	r3, [pc, #560]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001488:	d10b      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148a:	4b89      	ldr	r3, [pc, #548]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d06c      	beq.n	8001570 <HAL_RCC_OscConfig+0x12c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d168      	bne.n	8001570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e24c      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x76>
 80014ac:	4b80      	ldr	r3, [pc, #512]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a7f      	ldr	r2, [pc, #508]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e02e      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b7b      	ldr	r3, [pc, #492]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7a      	ldr	r2, [pc, #488]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b78      	ldr	r3, [pc, #480]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a77      	ldr	r2, [pc, #476]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01d      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0xbc>
 80014e6:	4b72      	ldr	r3, [pc, #456]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a71      	ldr	r2, [pc, #452]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b6f      	ldr	r3, [pc, #444]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6e      	ldr	r2, [pc, #440]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 8001500:	4b6b      	ldr	r3, [pc, #428]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6a      	ldr	r2, [pc, #424]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b68      	ldr	r3, [pc, #416]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a67      	ldr	r2, [pc, #412]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff f85e 	bl	80005e0 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff f85a 	bl	80005e0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	@ 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e200      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xe4>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff f84a 	bl	80005e0 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff f846 	bl	80005e0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	@ 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1ec      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	4b53      	ldr	r3, [pc, #332]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x10c>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d063      	beq.n	8001646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157e:	4b4c      	ldr	r3, [pc, #304]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800158a:	4b49      	ldr	r3, [pc, #292]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b08      	cmp	r3, #8
 8001594:	d11c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
 8001596:	4b46      	ldr	r3, [pc, #280]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4b43      	ldr	r3, [pc, #268]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1c0      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b3d      	ldr	r3, [pc, #244]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4939      	ldr	r1, [pc, #228]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d8:	4b36      	ldr	r3, [pc, #216]	@ (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7fe ffff 	bl	80005e0 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7fe fffb 	bl	80005e0 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e1a1      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b2d      	ldr	r3, [pc, #180]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b2a      	ldr	r3, [pc, #168]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4927      	ldr	r1, [pc, #156]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b26      	ldr	r3, [pc, #152]	@ (80016b4 <HAL_RCC_OscConfig+0x270>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7fe ffde 	bl	80005e0 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001628:	f7fe ffda 	bl	80005e0 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e180      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03a      	beq.n	80016c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d019      	beq.n	800168e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b17      	ldr	r3, [pc, #92]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7fe ffbe 	bl	80005e0 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7fe ffba 	bl	80005e0 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e160      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	4b0d      	ldr	r3, [pc, #52]	@ (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 faba 	bl	8001c00 <RCC_Delay>
 800168c:	e01c      	b.n	80016c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7fe ffa4 	bl	80005e0 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169a:	e00f      	b.n	80016bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169c:	f7fe ffa0 	bl	80005e0 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d908      	bls.n	80016bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e146      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	42420000 	.word	0x42420000
 80016b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b92      	ldr	r3, [pc, #584]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e9      	bne.n	800169c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a6 	beq.w	8001822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b8b      	ldr	r3, [pc, #556]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a87      	ldr	r2, [pc, #540]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b85      	ldr	r3, [pc, #532]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4b82      	ldr	r3, [pc, #520]	@ (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170e:	4b7f      	ldr	r3, [pc, #508]	@ (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a7e      	ldr	r2, [pc, #504]	@ (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7fe ff61 	bl	80005e0 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7fe ff5d 	bl	80005e0 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	@ 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e103      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b75      	ldr	r3, [pc, #468]	@ (800190c <HAL_RCC_OscConfig+0x4c8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x312>
 8001748:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a6e      	ldr	r2, [pc, #440]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x334>
 800175e:	4b6a      	ldr	r3, [pc, #424]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a69      	ldr	r2, [pc, #420]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4b67      	ldr	r3, [pc, #412]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a66      	ldr	r2, [pc, #408]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x356>
 8001780:	4b61      	ldr	r3, [pc, #388]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a60      	ldr	r2, [pc, #384]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	4b5e      	ldr	r3, [pc, #376]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a5d      	ldr	r2, [pc, #372]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 800179a:	4b5b      	ldr	r3, [pc, #364]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a5a      	ldr	r2, [pc, #360]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	4b58      	ldr	r3, [pc, #352]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a57      	ldr	r2, [pc, #348]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7fe ff11 	bl	80005e0 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7fe ff0d 	bl	80005e0 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0b1      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x37e>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7fe fefb 	bl	80005e0 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7fe fef7 	bl	80005e0 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e09b      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b40      	ldr	r3, [pc, #256]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001816:	4b3c      	ldr	r3, [pc, #240]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a3b      	ldr	r2, [pc, #236]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8087 	beq.w	800193a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d061      	beq.n	80018fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d146      	bne.n	80018ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <HAL_RCC_OscConfig+0x4cc>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7fe fecb 	bl	80005e0 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7fe fec7 	bl	80005e0 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e06d      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	4b29      	ldr	r3, [pc, #164]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001876:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4921      	ldr	r1, [pc, #132]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a19      	ldr	r1, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001898:	430b      	orrs	r3, r1
 800189a:	491b      	ldr	r1, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001910 <HAL_RCC_OscConfig+0x4cc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7fe fe9b 	bl	80005e0 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7fe fe97 	bl	80005e0 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e03d      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x46a>
 80018cc:	e035      	b.n	800193a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_RCC_OscConfig+0x4cc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7fe fe84 	bl	80005e0 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7fe fe80 	bl	80005e0 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e026      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x498>
 80018fa:	e01e      	b.n	800193a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d107      	bne.n	8001914 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e019      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
 8001908:	40021000 	.word	0x40021000
 800190c:	40007000 	.word	0x40007000
 8001910:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_RCC_OscConfig+0x500>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	429a      	cmp	r2, r3
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e0d0      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d910      	bls.n	800198c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b67      	ldr	r3, [pc, #412]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0207 	bic.w	r2, r3, #7
 8001972:	4965      	ldr	r1, [pc, #404]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b63      	ldr	r3, [pc, #396]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0b8      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a4:	4b59      	ldr	r3, [pc, #356]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a58      	ldr	r2, [pc, #352]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80019ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0308 	and.w	r3, r3, #8
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019bc:	4b53      	ldr	r3, [pc, #332]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	4a52      	ldr	r2, [pc, #328]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80019c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c8:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	494d      	ldr	r1, [pc, #308]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d040      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ee:	4b47      	ldr	r3, [pc, #284]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d115      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e07f      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a06:	4b41      	ldr	r3, [pc, #260]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e073      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a16:	4b3d      	ldr	r3, [pc, #244]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e06b      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b39      	ldr	r3, [pc, #228]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4936      	ldr	r1, [pc, #216]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a38:	f7fe fdd2 	bl	80005e0 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7fe fdce 	bl	80005e0 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e053      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b2d      	ldr	r3, [pc, #180]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a68:	4b27      	ldr	r3, [pc, #156]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d210      	bcs.n	8001a98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 0207 	bic.w	r2, r3, #7
 8001a7e:	4922      	ldr	r1, [pc, #136]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a86:	4b20      	ldr	r3, [pc, #128]	@ (8001b08 <HAL_RCC_ClockConfig+0x1c0>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	683a      	ldr	r2, [r7, #0]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d001      	beq.n	8001a98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e032      	b.n	8001afe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4916      	ldr	r1, [pc, #88]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	490e      	ldr	r1, [pc, #56]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad6:	f000 f821 	bl	8001b1c <HAL_RCC_GetSysClockFreq>
 8001ada:	4602      	mov	r2, r0
 8001adc:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c4>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	091b      	lsrs	r3, r3, #4
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	490a      	ldr	r1, [pc, #40]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	5ccb      	ldrb	r3, [r1, r3]
 8001aea:	fa22 f303 	lsr.w	r3, r2, r3
 8001aee:	4a09      	ldr	r2, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1cc>)
 8001af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <HAL_RCC_ClockConfig+0x1d0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fd30 	bl	800055c <HAL_InitTick>

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	080023fc 	.word	0x080023fc
 8001b14:	20000010 	.word	0x20000010
 8001b18:	20000014 	.word	0x20000014

08001b1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b36:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d002      	beq.n	8001b4c <HAL_RCC_GetSysClockFreq+0x30>
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d003      	beq.n	8001b52 <HAL_RCC_GetSysClockFreq+0x36>
 8001b4a:	e027      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4e:	613b      	str	r3, [r7, #16]
      break;
 8001b50:	e027      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	0c9b      	lsrs	r3, r3, #18
 8001b56:	f003 030f 	and.w	r3, r3, #15
 8001b5a:	4a17      	ldr	r2, [pc, #92]	@ (8001bb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b5c:	5cd3      	ldrb	r3, [r2, r3]
 8001b5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d010      	beq.n	8001b8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b6a:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	0c5b      	lsrs	r3, r3, #17
 8001b70:	f003 0301 	and.w	r3, r3, #1
 8001b74:	4a11      	ldr	r2, [pc, #68]	@ (8001bbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b76:	5cd3      	ldrb	r3, [r2, r3]
 8001b78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b7e:	fb03 f202 	mul.w	r2, r3, r2
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e004      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b90:	fb02 f303 	mul.w	r3, r2, r3
 8001b94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	613b      	str	r3, [r7, #16]
      break;
 8001b9a:	e002      	b.n	8001ba2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b9e:	613b      	str	r3, [r7, #16]
      break;
 8001ba0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ba2:	693b      	ldr	r3, [r7, #16]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	08002414 	.word	0x08002414
 8001bbc:	08002424 	.word	0x08002424
 8001bc0:	003d0900 	.word	0x003d0900

08001bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc8:	4b02      	ldr	r3, [pc, #8]	@ (8001bd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bca:	681b      	ldr	r3, [r3, #0]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bc80      	pop	{r7}
 8001bd2:	4770      	bx	lr
 8001bd4:	20000010 	.word	0x20000010

08001bd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bdc:	f7ff fff2 	bl	8001bc4 <HAL_RCC_GetHCLKFreq>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	4903      	ldr	r1, [pc, #12]	@ (8001bfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bee:	5ccb      	ldrb	r3, [r1, r3]
 8001bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	0800240c 	.word	0x0800240c

08001c00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c08:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <RCC_Delay+0x34>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c38 <RCC_Delay+0x38>)
 8001c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c12:	0a5b      	lsrs	r3, r3, #9
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	fb02 f303 	mul.w	r3, r2, r3
 8001c1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c1c:	bf00      	nop
  }
  while (Delay --);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1e5a      	subs	r2, r3, #1
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1f9      	bne.n	8001c1c <RCC_Delay+0x1c>
}
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	3714      	adds	r7, #20
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bc80      	pop	{r7}
 8001c32:	4770      	bx	lr
 8001c34:	20000010 	.word	0x20000010
 8001c38:	10624dd3 	.word	0x10624dd3

08001c3c <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	4603      	mov	r3, r0
 8001c44:	460a      	mov	r2, r1
 8001c46:	71fb      	strb	r3, [r7, #7]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	4a13      	ldr	r2, [pc, #76]	@ (8001c9c <I2C_LCD_ExpanderWrite+0x60>)
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	4413      	add	r3, r2
 8001c54:	785a      	ldrb	r2, [r3, #1]
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8001c5e:	79fa      	ldrb	r2, [r7, #7]
 8001c60:	490f      	ldr	r1, [pc, #60]	@ (8001ca0 <I2C_LCD_ExpanderWrite+0x64>)
 8001c62:	4613      	mov	r3, r2
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3304      	adds	r3, #4
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	79fa      	ldrb	r2, [r7, #7]
 8001c72:	490b      	ldr	r1, [pc, #44]	@ (8001ca0 <I2C_LCD_ExpanderWrite+0x64>)
 8001c74:	4613      	mov	r3, r2
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	440b      	add	r3, r1
 8001c7e:	3308      	adds	r3, #8
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	b299      	uxth	r1, r3
 8001c86:	f107 020f 	add.w	r2, r7, #15
 8001c8a:	2364      	movs	r3, #100	@ 0x64
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2301      	movs	r3, #1
 8001c90:	f7ff f880 	bl	8000d94 <HAL_I2C_Master_Transmit>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000090 	.word	0x20000090
 8001ca0:	08002428 	.word	0x08002428

08001ca4 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	460a      	mov	r2, r1
 8001cae:	71fb      	strb	r3, [r7, #7]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	b2da      	uxtb	r2, r3
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ffbb 	bl	8001c3c <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8001cc6:	4b22      	ldr	r3, [pc, #136]	@ (8001d50 <I2C_LCD_EnPulse+0xac>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	4b21      	ldr	r3, [pc, #132]	@ (8001d54 <I2C_LCD_EnPulse+0xb0>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a21      	ldr	r2, [pc, #132]	@ (8001d58 <I2C_LCD_EnPulse+0xb4>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	0c9b      	lsrs	r3, r3, #18
 8001cd8:	005a      	lsls	r2, r3, #1
 8001cda:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <I2C_LCD_EnPulse+0xb0>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	491e      	ldr	r1, [pc, #120]	@ (8001d58 <I2C_LCD_EnPulse+0xb4>)
 8001ce0:	fba1 1303 	umull	r1, r3, r1, r3
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <I2C_LCD_EnPulse+0xac>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d8f8      	bhi.n	8001cec <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	f023 0304 	bic.w	r3, r3, #4
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	79fb      	ldrb	r3, [r7, #7]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff98 	bl	8001c3c <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8001d0c:	4b10      	ldr	r3, [pc, #64]	@ (8001d50 <I2C_LCD_EnPulse+0xac>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	60fb      	str	r3, [r7, #12]
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <I2C_LCD_EnPulse+0xb0>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a10      	ldr	r2, [pc, #64]	@ (8001d58 <I2C_LCD_EnPulse+0xb4>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	0c9b      	lsrs	r3, r3, #18
 8001d1e:	2232      	movs	r2, #50	@ 0x32
 8001d20:	fb03 f202 	mul.w	r2, r3, r2
 8001d24:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <I2C_LCD_EnPulse+0xb0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	490b      	ldr	r1, [pc, #44]	@ (8001d58 <I2C_LCD_EnPulse+0xb4>)
 8001d2a:	fba1 1303 	umull	r1, r3, r1, r3
 8001d2e:	0c9b      	lsrs	r3, r3, #18
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <I2C_LCD_EnPulse+0xac>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d8f8      	bhi.n	8001d36 <I2C_LCD_EnPulse+0x92>
}
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	bf00      	nop
 8001d50:	e000e010 	.word	0xe000e010
 8001d54:	20000010 	.word	0x20000010
 8001d58:	431bde83 	.word	0x431bde83

08001d5c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	460a      	mov	r2, r1
 8001d66:	71fb      	strb	r3, [r7, #7]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8001d6c:	79ba      	ldrb	r2, [r7, #6]
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	4611      	mov	r1, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff62 	bl	8001c3c <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8001d78:	79ba      	ldrb	r2, [r7, #6]
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff90 	bl	8001ca4 <I2C_LCD_EnPulse>
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
 8001d96:	460b      	mov	r3, r1
 8001d98:	71bb      	strb	r3, [r7, #6]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8001d9e:	79bb      	ldrb	r3, [r7, #6]
 8001da0:	f023 030f 	bic.w	r3, r3, #15
 8001da4:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8001da6:	79bb      	ldrb	r3, [r7, #6]
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8001dac:	7bfa      	ldrb	r2, [r7, #15]
 8001dae:	797b      	ldrb	r3, [r7, #5]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	4611      	mov	r1, r2
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ffcf 	bl	8001d5c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8001dbe:	7bba      	ldrb	r2, [r7, #14]
 8001dc0:	797b      	ldrb	r3, [r7, #5]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	4611      	mov	r1, r2
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff ffc6 	bl	8001d5c <I2C_LCD_Write4Bits>
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	460a      	mov	r2, r1
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8001de8:	79b9      	ldrb	r1, [r7, #6]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	2200      	movs	r2, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ffcc 	bl	8001d8c <I2C_LCD_Send>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	4603      	mov	r3, r0
 8001e04:	460a      	mov	r2, r1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8001e0c:	79b9      	ldrb	r1, [r7, #6]
 8001e0e:	79fb      	ldrb	r3, [r7, #7]
 8001e10:	2201      	movs	r2, #1
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ffba 	bl	8001d8c <I2C_LCD_Send>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	@ 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8001e2a:	bf00      	nop
 8001e2c:	f7fe fbd8 	bl	80005e0 <HAL_GetTick>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b31      	cmp	r3, #49	@ 0x31
 8001e34:	d9fa      	bls.n	8001e2c <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	2130      	movs	r1, #48	@ 0x30
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ffcc 	bl	8001dd8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e44:	e01f      	b.n	8001e86 <I2C_LCD_Init+0x66>
 8001e46:	4b4b      	ldr	r3, [pc, #300]	@ (8001f74 <I2C_LCD_Init+0x154>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f78 <I2C_LCD_Init+0x158>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a4a      	ldr	r2, [pc, #296]	@ (8001f7c <I2C_LCD_Init+0x15c>)
 8001e52:	fba2 2303 	umull	r2, r3, r2, r3
 8001e56:	0c9b      	lsrs	r3, r3, #18
 8001e58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001e5c:	fb03 f202 	mul.w	r2, r3, r2
 8001e60:	4b45      	ldr	r3, [pc, #276]	@ (8001f78 <I2C_LCD_Init+0x158>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4945      	ldr	r1, [pc, #276]	@ (8001f7c <I2C_LCD_Init+0x15c>)
 8001e66:	fba1 1303 	umull	r1, r3, r1, r3
 8001e6a:	0c9b      	lsrs	r3, r3, #18
 8001e6c:	085b      	lsrs	r3, r3, #1
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	4b40      	ldr	r3, [pc, #256]	@ (8001f74 <I2C_LCD_Init+0x154>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	68ba      	ldr	r2, [r7, #8]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d8f8      	bhi.n	8001e72 <I2C_LCD_Init+0x52>
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	3301      	adds	r3, #1
 8001e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d9dc      	bls.n	8001e46 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	2130      	movs	r1, #48	@ 0x30
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff ffa1 	bl	8001dd8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8001e96:	2300      	movs	r3, #0
 8001e98:	623b      	str	r3, [r7, #32]
 8001e9a:	e01f      	b.n	8001edc <I2C_LCD_Init+0xbc>
 8001e9c:	4b35      	ldr	r3, [pc, #212]	@ (8001f74 <I2C_LCD_Init+0x154>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b35      	ldr	r3, [pc, #212]	@ (8001f78 <I2C_LCD_Init+0x158>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a35      	ldr	r2, [pc, #212]	@ (8001f7c <I2C_LCD_Init+0x15c>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	0c9b      	lsrs	r3, r3, #18
 8001eae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001eb2:	fb03 f202 	mul.w	r2, r3, r2
 8001eb6:	4b30      	ldr	r3, [pc, #192]	@ (8001f78 <I2C_LCD_Init+0x158>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4930      	ldr	r1, [pc, #192]	@ (8001f7c <I2C_LCD_Init+0x15c>)
 8001ebc:	fba1 1303 	umull	r1, r3, r1, r3
 8001ec0:	0c9b      	lsrs	r3, r3, #18
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8001f74 <I2C_LCD_Init+0x154>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	697a      	ldr	r2, [r7, #20]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d8f8      	bhi.n	8001ec8 <I2C_LCD_Init+0xa8>
 8001ed6:	6a3b      	ldr	r3, [r7, #32]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	623b      	str	r3, [r7, #32]
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	d9dc      	bls.n	8001e9c <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2130      	movs	r1, #48	@ 0x30
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff ff76 	bl	8001dd8 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <I2C_LCD_Init+0x154>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	4b21      	ldr	r3, [pc, #132]	@ (8001f78 <I2C_LCD_Init+0x158>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <I2C_LCD_Init+0x15c>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	0c9b      	lsrs	r3, r3, #18
 8001efe:	2296      	movs	r2, #150	@ 0x96
 8001f00:	fb03 f202 	mul.w	r2, r3, r2
 8001f04:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <I2C_LCD_Init+0x158>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	491c      	ldr	r1, [pc, #112]	@ (8001f7c <I2C_LCD_Init+0x15c>)
 8001f0a:	fba1 1303 	umull	r1, r3, r1, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	085b      	lsrs	r3, r3, #1
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	61bb      	str	r3, [r7, #24]
 8001f16:	4b17      	ldr	r3, [pc, #92]	@ (8001f74 <I2C_LCD_Init+0x154>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d8f8      	bhi.n	8001f16 <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	2102      	movs	r1, #2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff55 	bl	8001dd8 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2128      	movs	r1, #40	@ 0x28
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff50 	bl	8001dd8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	210c      	movs	r1, #12
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff4b 	bl	8001dd8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2106      	movs	r1, #6
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff46 	bl	8001dd8 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <I2C_LCD_Init+0x160>)
 8001f50:	2104      	movs	r1, #4
 8001f52:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	4a09      	ldr	r2, [pc, #36]	@ (8001f80 <I2C_LCD_Init+0x160>)
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2208      	movs	r2, #8
 8001f60:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f80d 	bl	8001f84 <I2C_LCD_Clear>
}
 8001f6a:	bf00      	nop
 8001f6c:	3728      	adds	r7, #40	@ 0x28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	e000e010 	.word	0xe000e010
 8001f78:	20000010 	.word	0x20000010
 8001f7c:	431bde83 	.word	0x431bde83
 8001f80:	20000090 	.word	0x20000090

08001f84 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	2101      	movs	r1, #1
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff20 	bl	8001dd8 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8001f98:	2300      	movs	r3, #0
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	e01f      	b.n	8001fde <I2C_LCD_Clear+0x5a>
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <I2C_LCD_Clear+0x6c>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	4b13      	ldr	r3, [pc, #76]	@ (8001ff4 <I2C_LCD_Clear+0x70>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a13      	ldr	r2, [pc, #76]	@ (8001ff8 <I2C_LCD_Clear+0x74>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001fb4:	fb03 f202 	mul.w	r2, r3, r2
 8001fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <I2C_LCD_Clear+0x70>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	490e      	ldr	r1, [pc, #56]	@ (8001ff8 <I2C_LCD_Clear+0x74>)
 8001fbe:	fba1 1303 	umull	r1, r3, r1, r3
 8001fc2:	0c9b      	lsrs	r3, r3, #18
 8001fc4:	085b      	lsrs	r3, r3, #1
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <I2C_LCD_Clear+0x6c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f8      	bhi.n	8001fca <I2C_LCD_Clear+0x46>
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d9dc      	bls.n	8001f9e <I2C_LCD_Clear+0x1a>
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	e000e010 	.word	0xe000e010
 8001ff4:	20000010 	.word	0x20000010
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b087      	sub	sp, #28
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
 8002006:	460b      	mov	r3, r1
 8002008:	71bb      	strb	r3, [r7, #6]
 800200a:	4613      	mov	r3, r2
 800200c:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <I2C_LCD_SetCursor+0x7c>)
 8002010:	f107 0408 	add.w	r4, r7, #8
 8002014:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002016:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 800201a:	79fa      	ldrb	r2, [r7, #7]
 800201c:	4917      	ldr	r1, [pc, #92]	@ (800207c <I2C_LCD_SetCursor+0x80>)
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	440b      	add	r3, r1
 8002028:	330a      	adds	r3, #10
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	797a      	ldrb	r2, [r7, #5]
 800202e:	429a      	cmp	r2, r3
 8002030:	d90a      	bls.n	8002048 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8002032:	79fa      	ldrb	r2, [r7, #7]
 8002034:	4911      	ldr	r1, [pc, #68]	@ (800207c <I2C_LCD_SetCursor+0x80>)
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	330a      	adds	r3, #10
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3b01      	subs	r3, #1
 8002046:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8002048:	797b      	ldrb	r3, [r7, #5]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	3318      	adds	r3, #24
 800204e:	443b      	add	r3, r7
 8002050:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	79bb      	ldrb	r3, [r7, #6]
 8002058:	4413      	add	r3, r2
 800205a:	b2db      	uxtb	r3, r3
 800205c:	b25b      	sxtb	r3, r3
 800205e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002062:	b25b      	sxtb	r3, r3
 8002064:	b2da      	uxtb	r2, r3
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f7ff feb4 	bl	8001dd8 <I2C_LCD_Cmd>
}
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}
 8002078:	080023ec 	.word	0x080023ec
 800207c:	08002428 	.word	0x08002428

08002080 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	6039      	str	r1, [r7, #0]
 800208a:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 800208c:	e008      	b.n	80020a0 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	603a      	str	r2, [r7, #0]
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff feae 	bl	8001dfc <I2C_LCD_Data>
    while (*Str)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1f2      	bne.n	800208e <I2C_LCD_WriteString+0xe>
    }
}
 80020a8:	bf00      	nop
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <I2C_LCD_ShiftLeft>:

void I2C_LCD_ShiftLeft(uint8_t I2C_LCD_InstanceIndex)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	4603      	mov	r3, r0
 80020ba:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVELEFT);
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	2118      	movs	r1, #24
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7ff fe89 	bl	8001dd8 <I2C_LCD_Cmd>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <I2C_LCD_ShiftRight>:

void I2C_LCD_ShiftRight(uint8_t I2C_LCD_InstanceIndex)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	4603      	mov	r3, r0
 80020d6:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	211c      	movs	r1, #28
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fe7b 	bl	8001dd8 <I2C_LCD_Cmd>
}
 80020e2:	bf00      	nop
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <I2C_LCD_Backlight>:

void I2C_LCD_Backlight(uint8_t I2C_LCD_InstanceIndex)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	4a06      	ldr	r2, [pc, #24]	@ (8002114 <I2C_LCD_Backlight+0x28>)
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	4413      	add	r3, r2
 80020fe:	2208      	movs	r2, #8
 8002100:	705a      	strb	r2, [r3, #1]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2100      	movs	r1, #0
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fd98 	bl	8001c3c <I2C_LCD_ExpanderWrite>
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000090 	.word	0x20000090

08002118 <I2C_LCD_NoBacklight>:

void I2C_LCD_NoBacklight(uint8_t I2C_LCD_InstanceIndex)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_NOBACKLIGHT;
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4a06      	ldr	r2, [pc, #24]	@ (8002140 <I2C_LCD_NoBacklight+0x28>)
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	2200      	movs	r2, #0
 800212c:	705a      	strb	r2, [r3, #1]
    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, 0);
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff fd82 	bl	8001c3c <I2C_LCD_ExpanderWrite>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20000090 	.word	0x20000090

08002144 <I2C_LCD_Display>:

void I2C_LCD_Display(uint8_t I2C_LCD_InstanceIndex)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_DISPLAYON;
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4a0c      	ldr	r2, [pc, #48]	@ (8002184 <I2C_LCD_Display+0x40>)
 8002152:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	f042 0204 	orr.w	r2, r2, #4
 800215c:	b2d1      	uxtb	r1, r2
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <I2C_LCD_Display+0x40>)
 8002160:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 8002164:	79fb      	ldrb	r3, [r7, #7]
 8002166:	4a07      	ldr	r2, [pc, #28]	@ (8002184 <I2C_LCD_Display+0x40>)
 8002168:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800216c:	f043 0308 	orr.w	r3, r3, #8
 8002170:	b2da      	uxtb	r2, r3
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	4611      	mov	r1, r2
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff fe2e 	bl	8001dd8 <I2C_LCD_Cmd>
}
 800217c:	bf00      	nop
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000090 	.word	0x20000090

08002188 <I2C_LCD_NoDisplay>:

void I2C_LCD_NoDisplay(uint8_t I2C_LCD_InstanceIndex)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_DISPLAYON;
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	4a0c      	ldr	r2, [pc, #48]	@ (80021c8 <I2C_LCD_NoDisplay+0x40>)
 8002196:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f022 0204 	bic.w	r2, r2, #4
 80021a0:	b2d1      	uxtb	r1, r2
 80021a2:	4a09      	ldr	r2, [pc, #36]	@ (80021c8 <I2C_LCD_NoDisplay+0x40>)
 80021a4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	4a07      	ldr	r2, [pc, #28]	@ (80021c8 <I2C_LCD_NoDisplay+0x40>)
 80021ac:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7ff fe0c 	bl	8001dd8 <I2C_LCD_Cmd>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000090 	.word	0x20000090

080021cc <I2C_LCD_Cursor>:

void I2C_LCD_Cursor(uint8_t I2C_LCD_InstanceIndex)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_CURSORON;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	4a0c      	ldr	r2, [pc, #48]	@ (800220c <I2C_LCD_Cursor+0x40>)
 80021da:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f042 0202 	orr.w	r2, r2, #2
 80021e4:	b2d1      	uxtb	r1, r2
 80021e6:	4a09      	ldr	r2, [pc, #36]	@ (800220c <I2C_LCD_Cursor+0x40>)
 80021e8:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	4a07      	ldr	r2, [pc, #28]	@ (800220c <I2C_LCD_Cursor+0x40>)
 80021f0:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80021f4:	f043 0308 	orr.w	r3, r3, #8
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fdea 	bl	8001dd8 <I2C_LCD_Cmd>
}
 8002204:	bf00      	nop
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000090 	.word	0x20000090

08002210 <I2C_LCD_NoCursor>:

void I2C_LCD_NoCursor(uint8_t I2C_LCD_InstanceIndex)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	4603      	mov	r3, r0
 8002218:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_CURSORON;
 800221a:	79fb      	ldrb	r3, [r7, #7]
 800221c:	4a0c      	ldr	r2, [pc, #48]	@ (8002250 <I2C_LCD_NoCursor+0x40>)
 800221e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8002222:	79fb      	ldrb	r3, [r7, #7]
 8002224:	f022 0202 	bic.w	r2, r2, #2
 8002228:	b2d1      	uxtb	r1, r2
 800222a:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <I2C_LCD_NoCursor+0x40>)
 800222c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	4a07      	ldr	r2, [pc, #28]	@ (8002250 <I2C_LCD_NoCursor+0x40>)
 8002234:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	b2da      	uxtb	r2, r3
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f7ff fdc8 	bl	8001dd8 <I2C_LCD_Cmd>
}
 8002248:	bf00      	nop
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000090 	.word	0x20000090

08002254 <I2C_LCD_Blink>:

void I2C_LCD_Blink(uint8_t I2C_LCD_InstanceIndex)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_BLINKON;
 800225e:	79fb      	ldrb	r3, [r7, #7]
 8002260:	4a0c      	ldr	r2, [pc, #48]	@ (8002294 <I2C_LCD_Blink+0x40>)
 8002262:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f042 0201 	orr.w	r2, r2, #1
 800226c:	b2d1      	uxtb	r1, r2
 800226e:	4a09      	ldr	r2, [pc, #36]	@ (8002294 <I2C_LCD_Blink+0x40>)
 8002270:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4a07      	ldr	r2, [pc, #28]	@ (8002294 <I2C_LCD_Blink+0x40>)
 8002278:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800227c:	f043 0308 	orr.w	r3, r3, #8
 8002280:	b2da      	uxtb	r2, r3
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	4611      	mov	r1, r2
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fda6 	bl	8001dd8 <I2C_LCD_Cmd>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000090 	.word	0x20000090

08002298 <I2C_LCD_NoBlink>:

void I2C_LCD_NoBlink(uint8_t I2C_LCD_InstanceIndex)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_BLINKON;
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <I2C_LCD_NoBlink+0x40>)
 80022a6:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	f022 0201 	bic.w	r2, r2, #1
 80022b0:	b2d1      	uxtb	r1, r2
 80022b2:	4a09      	ldr	r2, [pc, #36]	@ (80022d8 <I2C_LCD_NoBlink+0x40>)
 80022b4:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 80022b8:	79fb      	ldrb	r3, [r7, #7]
 80022ba:	4a07      	ldr	r2, [pc, #28]	@ (80022d8 <I2C_LCD_NoBlink+0x40>)
 80022bc:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	4611      	mov	r1, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fd84 	bl	8001dd8 <I2C_LCD_Cmd>
}
 80022d0:	bf00      	nop
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000090 	.word	0x20000090

080022dc <I2C_LCD_CreateCustomChar>:

void I2C_LCD_CreateCustomChar(uint8_t I2C_LCD_InstanceIndex, uint8_t CharIndex, const uint8_t* CharMap)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	603a      	str	r2, [r7, #0]
 80022e6:	71fb      	strb	r3, [r7, #7]
 80022e8:	460b      	mov	r3, r1
 80022ea:	71bb      	strb	r3, [r7, #6]
    CharIndex &= 0x07;  // Ensure index is in the range 0-7
 80022ec:	79bb      	ldrb	r3, [r7, #6]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	71bb      	strb	r3, [r7, #6]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETCGRAMADDR | (CharIndex << 3));
 80022f4:	79bb      	ldrb	r3, [r7, #6]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022fe:	b25b      	sxtb	r3, r3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	79fb      	ldrb	r3, [r7, #7]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd66 	bl	8001dd8 <I2C_LCD_Cmd>
    for (int i = 0; i < 8; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	e00b      	b.n	800232a <I2C_LCD_CreateCustomChar+0x4e>
    {
    	I2C_LCD_Send(I2C_LCD_InstanceIndex, CharMap[i], RS);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	4413      	add	r3, r2
 8002318:	7819      	ldrb	r1, [r3, #0]
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	2201      	movs	r2, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fd34 	bl	8001d8c <I2C_LCD_Send>
    for (int i = 0; i < 8; i++)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3301      	adds	r3, #1
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2b07      	cmp	r3, #7
 800232e:	ddf0      	ble.n	8002312 <I2C_LCD_CreateCustomChar+0x36>
    }
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <I2C_LCD_PrintCustomChar>:

void I2C_LCD_PrintCustomChar(uint8_t I2C_LCD_InstanceIndex, uint8_t CharIndex)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	460a      	mov	r2, r1
 8002344:	71fb      	strb	r3, [r7, #7]
 8002346:	4613      	mov	r3, r2
 8002348:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CharIndex, RS);
 800234a:	79b9      	ldrb	r1, [r7, #6]
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	2201      	movs	r2, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fd1b 	bl	8001d8c <I2C_LCD_Send>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <memset>:
 800235e:	4603      	mov	r3, r0
 8002360:	4402      	add	r2, r0
 8002362:	4293      	cmp	r3, r2
 8002364:	d100      	bne.n	8002368 <memset+0xa>
 8002366:	4770      	bx	lr
 8002368:	f803 1b01 	strb.w	r1, [r3], #1
 800236c:	e7f9      	b.n	8002362 <memset+0x4>
	...

08002370 <__libc_init_array>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	2600      	movs	r6, #0
 8002374:	4d0c      	ldr	r5, [pc, #48]	@ (80023a8 <__libc_init_array+0x38>)
 8002376:	4c0d      	ldr	r4, [pc, #52]	@ (80023ac <__libc_init_array+0x3c>)
 8002378:	1b64      	subs	r4, r4, r5
 800237a:	10a4      	asrs	r4, r4, #2
 800237c:	42a6      	cmp	r6, r4
 800237e:	d109      	bne.n	8002394 <__libc_init_array+0x24>
 8002380:	f000 f81a 	bl	80023b8 <_init>
 8002384:	2600      	movs	r6, #0
 8002386:	4d0a      	ldr	r5, [pc, #40]	@ (80023b0 <__libc_init_array+0x40>)
 8002388:	4c0a      	ldr	r4, [pc, #40]	@ (80023b4 <__libc_init_array+0x44>)
 800238a:	1b64      	subs	r4, r4, r5
 800238c:	10a4      	asrs	r4, r4, #2
 800238e:	42a6      	cmp	r6, r4
 8002390:	d105      	bne.n	800239e <__libc_init_array+0x2e>
 8002392:	bd70      	pop	{r4, r5, r6, pc}
 8002394:	f855 3b04 	ldr.w	r3, [r5], #4
 8002398:	4798      	blx	r3
 800239a:	3601      	adds	r6, #1
 800239c:	e7ee      	b.n	800237c <__libc_init_array+0xc>
 800239e:	f855 3b04 	ldr.w	r3, [r5], #4
 80023a2:	4798      	blx	r3
 80023a4:	3601      	adds	r6, #1
 80023a6:	e7f2      	b.n	800238e <__libc_init_array+0x1e>
 80023a8:	08002434 	.word	0x08002434
 80023ac:	08002434 	.word	0x08002434
 80023b0:	08002434 	.word	0x08002434
 80023b4:	08002438 	.word	0x08002438

080023b8 <_init>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	bf00      	nop
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr

080023c4 <_fini>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	bf00      	nop
 80023c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ca:	bc08      	pop	{r3}
 80023cc:	469e      	mov	lr, r3
 80023ce:	4770      	bx	lr
